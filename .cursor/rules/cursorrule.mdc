---
description: 
globs: *.tsx,*.ts
alwaysApply: false
---
# Caring Note Web 프로젝트 Cursor 규칙

## 1. Keycloak 인증 관련 규칙

### Keycloak 설정
- `keycloak.ts`는 프로젝트의 인증 설정을 담당하는 유일한 파일이어야 합니다.
- Keycloak 설정값은 환경변수로 관리되어야 합니다.
- PKCE 방식의 인증을 사용합니다.

### AuthContext 규칙
- 인증 상태 관리는 `AuthContext`를 통해서만 이루어져야 합니다.
- 컴포넌트에서는 `useAuthContext` 훅을 통해서만 인증 정보에 접근해야 합니다.
- 인증 상태 변경은 `initAuthState` 함수를 통해서만 이루어져야 합니다.

## 2. Zustand 스토어 규칙

### 스토어 구조
- 각 도메인별로 별도의 스토어 파일을 생성합니다.
- 스토어 파일은 `src/stores` 디렉토리에 위치해야 합니다.
  - 특정 페이지에만 사용되는 스토어는 해당 페이지 폴더의 `hooks` 디렉토리에 위치시킵니다 (예: `src/pages/Survey/hooks/counselCardStore.ts`).
- 파일명은 `use[도메인명]Store.ts` 형식을 따릅니다.

### 스토어 인터페이스 정의
- 각 스토어는 명확한 인터페이스 정의를 포함해야 합니다.
- 상태(State)와 액션(Actions)을 분리하여 정의합니다.
- 타입은 API에서 생성된 타입을 최대한 재사용합니다.

```typescript
export interface [도메인명]State {
  // 상태 정의 (데이터, 로딩 상태, 에러 상태 등)
  data: Type | null;
  isLoading: boolean;
  error: string | null;
  isDirty?: boolean | Record<string, boolean>; // 변경 여부 추적용
}

export interface [도메인명]Actions {
  // 액션 정의 (상태 업데이트 함수들)
  setData: (data: Type) => void;
  clearData: () => void;
  setLoading: (isLoading: boolean) => void;
  setError: (error: string | null) => void;
}

export type [도메인명]Store = [도메인명]State & [도메인명]Actions;
```

### 스토어 구현 규칙
- 스토어 생성 시 create 함수를 사용합니다.
- 액션 함수는 항상 set 함수를 통해 상태를 업데이트해야 합니다.
- 비동기 작업은 스토어 내에서 직접 처리하지 않고, 쿼리 훅으로 분리합니다.

```typescript
import { create } from 'zustand'

export const use[도메인명]Store = create<[도메인명]Store>((set) => ({
  // 초기 상태
  data: null,
  isLoading: false,
  error: null,
  isDirty: false,
  
  // 액션
  setData: (data) => set({ data, isDirty: true }),
  clearData: () => set({ data: null, isDirty: false }),
  setLoading: (isLoading) => set({ isLoading }),
  setError: (error) => set({ error }),
}))
```

### 스토어 접근 패턴
- 컴포넌트에서는 훅을 통해 스토어에 접근합니다.
- 성능을 위해 선택적 구독을 사용합니다.
- 같은 스토어를 여러 컴포넌트에서 사용할 때 일관된 패턴을 유지합니다.

## 3. Shadcn 컴포넌트 규칙

### 컴포넌트 위치
- 커스텀 컴포넌트는 `src/components/common` 디렉토리에 위치합니다.
- Shadcn 컴포넌트는 `src/components/ui` 디렉토리에 위치합니다.

### 컴포넌트 네이밍
- PascalCase를 사용합니다.
- 컴포넌트 파일명은 컴포넌트 이름과 동일해야 합니다.

## 4. Vite + React 규칙

### 프로젝트 구조
```
src/
├── api/          # API 관련 코드
├── components/   # 컴포넌트
├── hooks/        # 커스텀 훅
├── stores/       # Zustand 스토어
├── types/        # 타입 정의
├── utils/        # 유틸리티 함수
└── pages/        # 페이지 컴포넌트
    └── [페이지명]/  # 특정 페이지 관련 파일
        ├── components/  # 페이지별 컴포넌트
        ├── hooks/       # 페이지별 훅과 스토어
        └── index.tsx    # 페이지 진입점
```

### 페이지 구조 규칙
- 각 페이지는 자체 디렉토리에 위치합니다.
- 페이지별 컴포넌트는 해당 페이지 디렉토리의 `components` 폴더에 둡니다.
- 페이지별 로직은 해당 페이지 디렉토리의 `hooks` 폴더에 둡니다.
- 탭 기반 UI는 `components/tabs` 폴더에 각 탭 컴포넌트를 분리합니다.

### 파일 네이밍
- 컴포넌트 파일: PascalCase
- 유틸리티 파일: camelCase
- 타입 파일: PascalCase.types.ts

## 5. OpenAPI Generator 규칙

### API 생성
- API 스펙 변경 시 자동으로 타입과 API 클라이언트를 생성합니다.
- 생성된 코드는 `src/api` 디렉토리에 위치합니다.

### API 사용
- 생성된 API 클라이언트는 React Query와 함께 사용합니다.
- API 호출은 커스텀 훅으로 래핑하여 사용합니다.

### 쿼리 훅 패턴
- 각 도메인별로 전용 쿼리 훅을 작성합니다.
- 훅 파일명은 `use[도메인명]Query.ts` 형식을 따릅니다.
- 각 쿼리 훅은 다음 구조를 따릅니다:
  - 데이터 조회 훅: `use[도메인명]Query`
  - 데이터 생성 훅: `useCreate[도메인명]Mutation`
  - 데이터 업데이트 훅: `useUpdate[도메인명]Mutation`
  - 데이터 삭제 훅: `useDelete[도메인명]Mutation`

```typescript
export const use[도메인명]Query = (id: string) => {
  const { setData, setLoading, setError } = use[도메인명]Store();
  
  return useQuery({
    queryKey: ['[도메인명]', id],
    queryFn: async () => {
      setLoading(true);
      try {
        const response = await api.getData(id);
        setData(response.data.data);
        return response.data.data;
      } catch (error) {
        handleError(error, setError);
        throw error;
      } finally {
        setLoading(false);
      }
    },
  });
};
```

## 6. 라우팅 규칙

### Router 구조
- `Router.tsx`는 최상위 라우터 설정만 담당합니다.
- `Routes.tsx`에서 실제 라우트 정의와 접근 제어를 관리합니다.

### Role 기반 라우팅
- 역할 기반 접근 제어는 `ProtectedLayout` 컴포넌트를 사용합니다.
- 각 라우트는 `allowedRoles` 속성을 통해 접근 가능한 역할을 명시합니다.
- 역할 정의는 `utils/constants.ts`의 `ROLE_ACCESS` 상수를 사용합니다.
- 권한이 없는 경로 접근 시 `/forbidden` 페이지로 리다이렉트됩니다.

### 라우트 정의 규칙
```typescript
const routes: AppRouteObject = {
  path: '/path',
  element: <ProtectedLayout allowedRoles={ROLE_ACCESS.ROLE_TYPE} />,
  children: [
    {
      path: 'subpath',
      element: <Component />,
    },
  ],
};
```

## 7. 공통 규칙

### 코드 스타일
- ESLint와 Prettier를 사용하여 코드 스타일을 통일합니다.
- TypeScript strict 모드를 사용합니다.

### 성능 최적화
- React.memo, useMemo, useCallback을 적절히 사용합니다.
- 불필요한 리렌더링을 방지합니다.

### 에러 처리
- API 에러는 전역 에러 핸들러에서 처리합니다.
- 사용자에게 적절한 에러 메시지를 표시합니다.

### 유효성 검증
- 폼 데이터 제출 전 유효성 검증 함수를 정의하여 사용합니다.
- 에러 메시지는 사용자 친화적으로 작성합니다.
- 유효성 검증 로직은 관련 쿼리 훅 파일에 정의합니다. 