/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { keycloak } from '@/app/keycloak';
import type { AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { handleApiError } from './errorHandler';

export const BASE_PATH = 'https://caringnote.co.kr/api'.replace(/\/+$/, '');

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|',
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
  url: string;
  options: RawAxiosRequestConfig;
}

export class BaseAPI {
  protected configuration: Configuration | undefined;
  private static interceptorsAdded = false;
  private static errorInterceptorId: number | null = null;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected axios: AxiosInstance = globalAxios,
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath ?? basePath;
    }

    // 인터셉터가 아직 추가되지 않은 경우에만 추가
    if (!BaseAPI.interceptorsAdded) {
      this.axios.interceptors.request.use(async (config) => {
        if (keycloak.token && keycloak.isTokenExpired()) {
          try {
            await keycloak.updateToken(5);
          } catch (error) {
            console.error('Token refresh failed:', error);
          }
        }

        const token = keycloak.token;
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
      });

      // 기존 에러 인터셉터 제거
      if (BaseAPI.errorInterceptorId !== null) {
        this.axios.interceptors.response.eject(BaseAPI.errorInterceptorId);
      }

      // 새로운 에러 인터셉터 추가
      BaseAPI.errorInterceptorId = this.axios.interceptors.response.use(
        (response) => response,
        (error) => {
          // 에러가 이미 처리되었는지 확인
          if (!error.config?.hasBeenHandled) {
            error.config.hasBeenHandled = true;
            handleApiError(error);
          }
          return Promise.reject(error);
        },
      );

      BaseAPI.interceptorsAdded = true;
    }
  }
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  constructor(public field: string, msg?: string) {
    super(msg);
    this.name = 'RequiredError';
  }
}

interface ServerMap {
  [key: string]: {
    url: string;
    description: string;
  }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {};
