/* tslint:disable */
/* eslint-disable */
/**
 * Spring Boot API
 * Spring Boot API 문서화 예시
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import type {
  AxiosPromise,
  AxiosInstance,
  RawAxiosRequestConfig,
  AxiosError,
  AxiosResponse,
} from "axios";
import globalAxios from "axios";

export const BASE_PATH = "https://caringnote.co.kr/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
  url: string;
  options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration | undefined;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected axios: AxiosInstance = globalAxios,
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath ?? basePath;
    }

    // 요청 인터셉터 추가
    this.axios.interceptors.request.use(
      (config) => {
        // 예: 인증 토큰을 요청 헤더에 추가
        const token = localStorage.getItem("authToken"); // 또는 context, 상태 등에서 가져올 수 있음
        if (token) {
          config.headers["Authorization"] = `Bearer ${token}`;
        }
        return config;
      },
      (error: AxiosError) => {
        // 요청 오류 처리
        return Promise.reject(error);
      },
    );

    // 응답 인터셉터 sample
    // this.axios.interceptors.response.use(
    //   (response: AxiosResponse) => {
    //     // 응답 성공 처리
    //     return response;
    //   },
    //   (error: AxiosError) => {
    //     // 응답 오류 처리
    //     if (error.response) {
    //       // 서버에서 응답이 왔을 경우
    //       console.error("API error", error.response.data);
    //     } else {
    //       // 네트워크 오류 등
    //       console.error("Network error", error.message);
    //     }
    //     return Promise.reject(error);
    //   },
    // );
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  constructor(public field: string, msg?: string) {
    super(msg);
    this.name = "RequiredError";
  }
}

interface ServerMap {
  [key: string]: {
    url: string;
    description: string;
  }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {};
