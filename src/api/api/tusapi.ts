/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeleteCounselor400Response } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
/**
 * TUSApi - axios parameter creator
 * @export
 */
export const TUSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 업로드된 tus 파일을 삭제합니다.
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUploadedFile: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('deleteUploadedFile', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/tus/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업로드한 상담세션 녹음 파일을 다운로드 합니다.
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFile: async (fileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getMediaFile', 'fileId', fileId)
            const localVarPath = `/v1/tus/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 지정된 업로드 리소스의 현재 업로드 오프셋, 길이 및 녹음 길이를 조회합니다.
         * @param {string} tusFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadStatus: async (tusFileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tusFileId' is not null or undefined
            assertParamExists('getUploadStatus', 'tusFileId', tusFileId)
            const localVarPath = `/v1/tus/{tusFileId}`
                .replace(`{${"tusFileId"}}`, encodeURIComponent(String(tusFileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업로드한 상담세션 녹음 파일을 병합합니다. 테스트용 API 입니다.
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeMediaFile: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('mergeMediaFile', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/tus/merge/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 서버의 tus 업로드 지원 버전 및 확장 정보를 반환합니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processOptions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 새로운 tus 업로드 리소스를 생성합니다. X-Recording-Duration 헤더로 녹음 길이(초)를 전달할 수 있습니다.
         * @param {string} uploadMetadata 업로드 메타데이터
         * @param {boolean} uploadDeferLength 업로드 크기 지연 여부 (1이면 true)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startUpload: async (uploadMetadata: string, uploadDeferLength: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadMetadata' is not null or undefined
            assertParamExists('startUpload', 'uploadMetadata', uploadMetadata)
            // verify required parameter 'uploadDeferLength' is not null or undefined
            assertParamExists('startUpload', 'uploadDeferLength', uploadDeferLength)
            const localVarPath = `/v1/tus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (uploadMetadata != null) {
                localVarHeaderParameter['Upload-Metadata'] = String(uploadMetadata);
            }
            if (uploadDeferLength != null) {
                localVarHeaderParameter['Upload-Defer-Length'] = typeof uploadDeferLength === 'string'
                    ? uploadDeferLength
                    : JSON.stringify(uploadDeferLength);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업로드 리소스에 데이터를 이어서 전송하고 오프셋을 갱신합니다. X-Recording-Duration 헤더로 현재까지의 녹음 길이(초)를 전달할 수 있습니다.
         * @param {string} fileId 
         * @param {number} uploadOffset 현재 파일 오프셋
         * @param {number} [xRecordingDuration] 현재까지의 녹음 길이 (초 단위)
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadProcess: async (fileId: string, uploadOffset: number, xRecordingDuration?: number, body?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('uploadProcess', 'fileId', fileId)
            // verify required parameter 'uploadOffset' is not null or undefined
            assertParamExists('uploadProcess', 'uploadOffset', uploadOffset)
            const localVarPath = `/v1/tus/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/offset+octet-stream';

            if (uploadOffset != null) {
                localVarHeaderParameter['Upload-Offset'] = typeof uploadOffset === 'string'
                    ? uploadOffset
                    : JSON.stringify(uploadOffset);
            }
            if (xRecordingDuration != null) {
                localVarHeaderParameter['X-Recording-Duration'] = typeof xRecordingDuration === 'string'
                    ? xRecordingDuration
                    : JSON.stringify(xRecordingDuration);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TUSApi - functional programming interface
 * @export
 */
export const TUSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TUSApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 업로드된 tus 파일을 삭제합니다.
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUploadedFile(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUploadedFile(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TUSApi.deleteUploadedFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 업로드한 상담세션 녹음 파일을 다운로드 합니다.
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaFile(fileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaFile(fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TUSApi.getMediaFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 지정된 업로드 리소스의 현재 업로드 오프셋, 길이 및 녹음 길이를 조회합니다.
         * @param {string} tusFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadStatus(tusFileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUploadStatus(tusFileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TUSApi.getUploadStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 업로드한 상담세션 녹음 파일을 병합합니다. 테스트용 API 입니다.
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergeMediaFile(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergeMediaFile(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TUSApi.mergeMediaFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 서버의 tus 업로드 지원 버전 및 확장 정보를 반환합니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processOptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processOptions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TUSApi.processOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 새로운 tus 업로드 리소스를 생성합니다. X-Recording-Duration 헤더로 녹음 길이(초)를 전달할 수 있습니다.
         * @param {string} uploadMetadata 업로드 메타데이터
         * @param {boolean} uploadDeferLength 업로드 크기 지연 여부 (1이면 true)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startUpload(uploadMetadata: string, uploadDeferLength: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startUpload(uploadMetadata, uploadDeferLength, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TUSApi.startUpload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 업로드 리소스에 데이터를 이어서 전송하고 오프셋을 갱신합니다. X-Recording-Duration 헤더로 현재까지의 녹음 길이(초)를 전달할 수 있습니다.
         * @param {string} fileId 
         * @param {number} uploadOffset 현재 파일 오프셋
         * @param {number} [xRecordingDuration] 현재까지의 녹음 길이 (초 단위)
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadProcess(fileId: string, uploadOffset: number, xRecordingDuration?: number, body?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadProcess(fileId, uploadOffset, xRecordingDuration, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TUSApi.uploadProcess']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TUSApi - factory interface
 * @export
 */
export const TUSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TUSApiFp(configuration)
    return {
        /**
         * 
         * @summary 업로드된 tus 파일을 삭제합니다.
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUploadedFile(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteUploadedFile(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업로드한 상담세션 녹음 파일을 다운로드 합니다.
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFile(fileId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getMediaFile(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 지정된 업로드 리소스의 현재 업로드 오프셋, 길이 및 녹음 길이를 조회합니다.
         * @param {string} tusFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadStatus(tusFileId: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getUploadStatus(tusFileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업로드한 상담세션 녹음 파일을 병합합니다. 테스트용 API 입니다.
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeMediaFile(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.mergeMediaFile(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 서버의 tus 업로드 지원 버전 및 확장 정보를 반환합니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processOptions(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.processOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 새로운 tus 업로드 리소스를 생성합니다. X-Recording-Duration 헤더로 녹음 길이(초)를 전달할 수 있습니다.
         * @param {string} uploadMetadata 업로드 메타데이터
         * @param {boolean} uploadDeferLength 업로드 크기 지연 여부 (1이면 true)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startUpload(uploadMetadata: string, uploadDeferLength: boolean, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.startUpload(uploadMetadata, uploadDeferLength, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업로드 리소스에 데이터를 이어서 전송하고 오프셋을 갱신합니다. X-Recording-Duration 헤더로 현재까지의 녹음 길이(초)를 전달할 수 있습니다.
         * @param {string} fileId 
         * @param {number} uploadOffset 현재 파일 오프셋
         * @param {number} [xRecordingDuration] 현재까지의 녹음 길이 (초 단위)
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadProcess(fileId: string, uploadOffset: number, xRecordingDuration?: number, body?: File, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.uploadProcess(fileId, uploadOffset, xRecordingDuration, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TUSApi - object-oriented interface
 * @export
 * @class TUSApi
 * @extends {BaseAPI}
 */
export class TUSApi extends BaseAPI {
    /**
     * 
     * @summary 업로드된 tus 파일을 삭제합니다.
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TUSApi
     */
    public deleteUploadedFile(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return TUSApiFp(this.configuration).deleteUploadedFile(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업로드한 상담세션 녹음 파일을 다운로드 합니다.
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TUSApi
     */
    public getMediaFile(fileId: string, options?: RawAxiosRequestConfig) {
        return TUSApiFp(this.configuration).getMediaFile(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 지정된 업로드 리소스의 현재 업로드 오프셋, 길이 및 녹음 길이를 조회합니다.
     * @param {string} tusFileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TUSApi
     */
    public getUploadStatus(tusFileId: string, options?: RawAxiosRequestConfig) {
        return TUSApiFp(this.configuration).getUploadStatus(tusFileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업로드한 상담세션 녹음 파일을 병합합니다. 테스트용 API 입니다.
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TUSApi
     */
    public mergeMediaFile(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return TUSApiFp(this.configuration).mergeMediaFile(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 서버의 tus 업로드 지원 버전 및 확장 정보를 반환합니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TUSApi
     */
    public processOptions(options?: RawAxiosRequestConfig) {
        return TUSApiFp(this.configuration).processOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 새로운 tus 업로드 리소스를 생성합니다. X-Recording-Duration 헤더로 녹음 길이(초)를 전달할 수 있습니다.
     * @param {string} uploadMetadata 업로드 메타데이터
     * @param {boolean} uploadDeferLength 업로드 크기 지연 여부 (1이면 true)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TUSApi
     */
    public startUpload(uploadMetadata: string, uploadDeferLength: boolean, options?: RawAxiosRequestConfig) {
        return TUSApiFp(this.configuration).startUpload(uploadMetadata, uploadDeferLength, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업로드 리소스에 데이터를 이어서 전송하고 오프셋을 갱신합니다. X-Recording-Duration 헤더로 현재까지의 녹음 길이(초)를 전달할 수 있습니다.
     * @param {string} fileId 
     * @param {number} uploadOffset 현재 파일 오프셋
     * @param {number} [xRecordingDuration] 현재까지의 녹음 길이 (초 단위)
     * @param {File} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TUSApi
     */
    public uploadProcess(fileId: string, uploadOffset: number, xRecordingDuration?: number, body?: File, options?: RawAxiosRequestConfig) {
        return TUSApiFp(this.configuration).uploadProcess(fileId, uploadOffset, xRecordingDuration, body, options).then((request) => request(this.axios, this.basePath));
    }
}

