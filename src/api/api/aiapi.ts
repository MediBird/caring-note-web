/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResListSelectSpeechToTextRes } from '../models';
// @ts-ignore
import type { CommonResSelectAICounselSummaryPopUpRes } from '../models';
// @ts-ignore
import type { CommonResSelectAICounselSummaryStatusRes } from '../models';
// @ts-ignore
import type { CommonResSelectAnalysedTextRes } from '../models';
// @ts-ignore
import type { ConvertSpeechToTextReq } from '../models';
// @ts-ignore
import type { DeleteAICounselSummaryReq } from '../models';
// @ts-ignore
import type { DeleteCounselor400Response } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { SuccessRes } from '../models';
/**
 * AIApi - axios parameter creator
 * @export
 */
export const AIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary convert Speech to Text
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertSpeechToText: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('convertSpeechToText', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/ai/{counselSessionId}/stt`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary convert Speech to Text
         * @param {File} audio 
         * @param {ConvertSpeechToTextReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertSpeechToText1: async (audio: File, body: ConvertSpeechToTextReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'audio' is not null or undefined
            assertParamExists('convertSpeechToText1', 'audio', audio)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('convertSpeechToText1', 'body', body)
            const localVarPath = `/v1/counsel/ai/stt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (audio !== undefined) { 
                localVarFormParams.append('audio', audio as any);
            }
    
            if (body !== undefined) { 
                localVarFormParams.append('body', new Blob([JSON.stringify(body)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary counselSessionId 기준 AI요약 삭제
         * @param {DeleteAICounselSummaryReq} deleteAICounselSummaryReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAICounselSummary: async (deleteAICounselSummaryReq: DeleteAICounselSummaryReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteAICounselSummaryReq' is not null or undefined
            assertParamExists('deleteAICounselSummary', 'deleteAICounselSummaryReq', deleteAICounselSummaryReq)
            const localVarPath = `/v1/counsel/ai`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteAICounselSummaryReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 녹음 popup 조건 충족 여부
         * @param {string} counselSessionId 
         * @param {string} [baseDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAICounselSummaryPopUp: async (counselSessionId: string, baseDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectAICounselSummaryPopUp', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/ai/{counselSessionId}/popup`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (baseDate !== undefined) {
                localVarQueryParameter['baseDate'] = (baseDate as any instanceof Date) ?
                    (baseDate as any).toISOString().substring(0,10) :
                    baseDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary AI 요약 상태 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAICounselSummaryStatus: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectAICounselSummaryStatus', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/ai/{counselSessionId}/status`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ta 결과 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAnalysedText: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectAnalysedText', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/ai/{counselSessionId}/ta`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary stt 결과 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectSpeechToText: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectSpeechToText', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/ai/{counselSessionId}/stt`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AIApi - functional programming interface
 * @export
 */
export const AIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary convert Speech to Text
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertSpeechToText(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertSpeechToText(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.convertSpeechToText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary convert Speech to Text
         * @param {File} audio 
         * @param {ConvertSpeechToTextReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertSpeechToText1(audio: File, body: ConvertSpeechToTextReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertSpeechToText1(audio, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.convertSpeechToText1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary counselSessionId 기준 AI요약 삭제
         * @param {DeleteAICounselSummaryReq} deleteAICounselSummaryReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAICounselSummary(deleteAICounselSummaryReq: DeleteAICounselSummaryReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAICounselSummary(deleteAICounselSummaryReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.deleteAICounselSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 녹음 popup 조건 충족 여부
         * @param {string} counselSessionId 
         * @param {string} [baseDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectAICounselSummaryPopUp(counselSessionId: string, baseDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectAICounselSummaryPopUpRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectAICounselSummaryPopUp(counselSessionId, baseDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.selectAICounselSummaryPopUp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary AI 요약 상태 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectAICounselSummaryStatus(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectAICounselSummaryStatusRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectAICounselSummaryStatus(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.selectAICounselSummaryStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ta 결과 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectAnalysedText(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectAnalysedTextRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectAnalysedText(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.selectAnalysedText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary stt 결과 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectSpeechToText(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListSelectSpeechToTextRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectSpeechToText(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.selectSpeechToText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AIApi - factory interface
 * @export
 */
export const AIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AIApiFp(configuration)
    return {
        /**
         * 
         * @summary convert Speech to Text
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertSpeechToText(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<SuccessRes> {
            return localVarFp.convertSpeechToText(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary convert Speech to Text
         * @param {File} audio 
         * @param {ConvertSpeechToTextReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertSpeechToText1(audio: File, body: ConvertSpeechToTextReq, options?: RawAxiosRequestConfig): AxiosPromise<SuccessRes> {
            return localVarFp.convertSpeechToText1(audio, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary counselSessionId 기준 AI요약 삭제
         * @param {DeleteAICounselSummaryReq} deleteAICounselSummaryReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAICounselSummary(deleteAICounselSummaryReq: DeleteAICounselSummaryReq, options?: RawAxiosRequestConfig): AxiosPromise<SuccessRes> {
            return localVarFp.deleteAICounselSummary(deleteAICounselSummaryReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 녹음 popup 조건 충족 여부
         * @param {string} counselSessionId 
         * @param {string} [baseDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAICounselSummaryPopUp(counselSessionId: string, baseDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectAICounselSummaryPopUpRes> {
            return localVarFp.selectAICounselSummaryPopUp(counselSessionId, baseDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary AI 요약 상태 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAICounselSummaryStatus(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectAICounselSummaryStatusRes> {
            return localVarFp.selectAICounselSummaryStatus(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ta 결과 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAnalysedText(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectAnalysedTextRes> {
            return localVarFp.selectAnalysedText(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary stt 결과 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectSpeechToText(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListSelectSpeechToTextRes> {
            return localVarFp.selectSpeechToText(counselSessionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AIApi - object-oriented interface
 * @export
 * @class AIApi
 * @extends {BaseAPI}
 */
export class AIApi extends BaseAPI {
    /**
     * 
     * @summary convert Speech to Text
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public convertSpeechToText(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).convertSpeechToText(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary convert Speech to Text
     * @param {File} audio 
     * @param {ConvertSpeechToTextReq} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public convertSpeechToText1(audio: File, body: ConvertSpeechToTextReq, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).convertSpeechToText1(audio, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary counselSessionId 기준 AI요약 삭제
     * @param {DeleteAICounselSummaryReq} deleteAICounselSummaryReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public deleteAICounselSummary(deleteAICounselSummaryReq: DeleteAICounselSummaryReq, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).deleteAICounselSummary(deleteAICounselSummaryReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 녹음 popup 조건 충족 여부
     * @param {string} counselSessionId 
     * @param {string} [baseDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public selectAICounselSummaryPopUp(counselSessionId: string, baseDate?: string, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).selectAICounselSummaryPopUp(counselSessionId, baseDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary AI 요약 상태 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public selectAICounselSummaryStatus(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).selectAICounselSummaryStatus(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ta 결과 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public selectAnalysedText(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).selectAnalysedText(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary stt 결과 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public selectSpeechToText(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).selectSpeechToText(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }
}

