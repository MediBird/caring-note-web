/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResCounselSessionStatRes } from '../models';
// @ts-ignore
import type { CommonResCreateCounselReservationRes } from '../models';
// @ts-ignore
import type { CommonResDeleteCounselSessionRes } from '../models';
// @ts-ignore
import type { CommonResListLocalDate } from '../models';
// @ts-ignore
import type { CommonResListSelectPreviousCounselSessionListRes } from '../models';
// @ts-ignore
import type { CommonResModifyCounselReservationRes } from '../models';
// @ts-ignore
import type { CommonResSelectCounselSessionRes } from '../models';
// @ts-ignore
import type { CommonResUpdateCounselorInCounselSessionRes } from '../models';
// @ts-ignore
import type { CommonResUpdateStatusInCounselSessionRes } from '../models';
// @ts-ignore
import type { CreateCounselReservationReq } from '../models';
// @ts-ignore
import type { DeleteCounselSessionReq } from '../models';
// @ts-ignore
import type { DeleteCounselor400Response } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { ModifyCounselReservationReq } from '../models';
// @ts-ignore
import type { PageResSelectCounselSessionListItem } from '../models';
// @ts-ignore
import type { PageResSelectCounselSessionRes } from '../models';
// @ts-ignore
import type { UpdateCounselorInCounselSessionReq } from '../models';
// @ts-ignore
import type { UpdateStatusInCounselSessionReq } from '../models';
/**
 * CounselSessionControllerApi - axios parameter creator
 * @export
 */
export const CounselSessionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 상담세션(일정) 추가
         * @param {CreateCounselReservationReq} createCounselReservationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCounselReservation: async (createCounselReservationReq: CreateCounselReservationReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCounselReservationReq' is not null or undefined
            assertParamExists('createCounselReservation', 'createCounselReservationReq', createCounselReservationReq)
            const localVarPath = `/v1/counsel/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCounselReservationReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담일정 삭제
         * @param {DeleteCounselSessionReq} deleteCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselSession: async (deleteCounselSessionReq: DeleteCounselSessionReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteCounselSessionReq' is not null or undefined
            assertParamExists('deleteCounselSession', 'deleteCounselSessionReq', deleteCounselSessionReq)
            const localVarPath = `/v1/counsel/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCounselSessionReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 특정 연월의 상담 세션이 있는 날짜 목록 조회
         * @param {number} year 
         * @param {number} month 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionDatesByYearAndMonth: async (year: number, month: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getSessionDatesByYearAndMonth', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getSessionDatesByYearAndMonth', 'month', month)
            const localVarPath = `/v1/counsel/session/sessions/dates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 세션 통계 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/counsel/session/sessions/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담일정 수정
         * @param {ModifyCounselReservationReq} modifyCounselReservationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCounselReservation: async (modifyCounselReservationReq: ModifyCounselReservationReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modifyCounselReservationReq' is not null or undefined
            assertParamExists('modifyCounselReservation', 'modifyCounselReservationReq', modifyCounselReservationReq)
            const localVarPath = `/v1/counsel/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyCounselReservationReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담일정 검색 및 필터링
         * @param {number} page 
         * @param {number} size 
         * @param {string} [counseleeNameKeyword] 
         * @param {Array<string>} [counselorNames] 
         * @param {Array<string>} [scheduledDates] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCounselSessions: async (page: number, size: number, counseleeNameKeyword?: string, counselorNames?: Array<string>, scheduledDates?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('searchCounselSessions', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('searchCounselSessions', 'size', size)
            const localVarPath = `/v1/counsel/session/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (counseleeNameKeyword !== undefined) {
                localVarQueryParameter['counseleeNameKeyword'] = counseleeNameKeyword;
            }

            if (counselorNames) {
                localVarQueryParameter['counselorNames'] = counselorNames;
            }

            if (scheduledDates) {
                localVarQueryParameter['scheduledDates'] = scheduledDates;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담일정 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselSession: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselSession', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/session/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담일정 목록 조회
         * @param {number} page 
         * @param {number} size 
         * @param {string} [baseDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselSessionListByBaseDateAndCursorAndSize: async (page: number, size: number, baseDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('selectCounselSessionListByBaseDateAndCursorAndSize', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('selectCounselSessionListByBaseDateAndCursorAndSize', 'size', size)
            const localVarPath = `/v1/counsel/session/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (baseDate !== undefined) {
                localVarQueryParameter['baseDate'] = (baseDate as any instanceof Date) ?
                    (baseDate as any).toISOString().substring(0,10) :
                    baseDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 이전 상담 내역 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPreviousCounselSessionList: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectPreviousCounselSessionList', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/session/{counselSessionId}/previous/list`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 일정 상태 변경
         * @param {UpdateStatusInCounselSessionReq} updateStatusInCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselSessionStatus: async (updateStatusInCounselSessionReq: UpdateStatusInCounselSessionReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateStatusInCounselSessionReq' is not null or undefined
            assertParamExists('updateCounselSessionStatus', 'updateStatusInCounselSessionReq', updateStatusInCounselSessionReq)
            const localVarPath = `/v1/counsel/session/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStatusInCounselSessionReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * req body에 counselorId 넣지 않은 경우 로그인 계정 정보로 할당됨.
         * @summary 상담일정 담당 약사 수정
         * @param {UpdateCounselorInCounselSessionReq} updateCounselorInCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselorInCounselSession: async (updateCounselorInCounselSessionReq: UpdateCounselorInCounselSessionReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCounselorInCounselSessionReq' is not null or undefined
            assertParamExists('updateCounselorInCounselSession', 'updateCounselorInCounselSessionReq', updateCounselorInCounselSessionReq)
            const localVarPath = `/v1/counsel/session/counselor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCounselorInCounselSessionReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CounselSessionControllerApi - functional programming interface
 * @export
 */
export const CounselSessionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CounselSessionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 상담세션(일정) 추가
         * @param {CreateCounselReservationReq} createCounselReservationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCounselReservation(createCounselReservationReq: CreateCounselReservationReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCreateCounselReservationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCounselReservation(createCounselReservationReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselSessionControllerApi.createCounselReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담일정 삭제
         * @param {DeleteCounselSessionReq} deleteCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCounselSession(deleteCounselSessionReq: DeleteCounselSessionReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResDeleteCounselSessionRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCounselSession(deleteCounselSessionReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselSessionControllerApi.deleteCounselSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 특정 연월의 상담 세션이 있는 날짜 목록 조회
         * @param {number} year 
         * @param {number} month 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionDatesByYearAndMonth(year: number, month: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListLocalDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionDatesByYearAndMonth(year, month, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselSessionControllerApi.getSessionDatesByYearAndMonth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 세션 통계 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselSessionStatRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselSessionControllerApi.getSessionStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담일정 수정
         * @param {ModifyCounselReservationReq} modifyCounselReservationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyCounselReservation(modifyCounselReservationReq: ModifyCounselReservationReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResModifyCounselReservationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyCounselReservation(modifyCounselReservationReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselSessionControllerApi.modifyCounselReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담일정 검색 및 필터링
         * @param {number} page 
         * @param {number} size 
         * @param {string} [counseleeNameKeyword] 
         * @param {Array<string>} [counselorNames] 
         * @param {Array<string>} [scheduledDates] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCounselSessions(page: number, size: number, counseleeNameKeyword?: string, counselorNames?: Array<string>, scheduledDates?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResSelectCounselSessionRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCounselSessions(page, size, counseleeNameKeyword, counselorNames, scheduledDates, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselSessionControllerApi.searchCounselSessions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담일정 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselSession(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectCounselSessionRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselSession(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselSessionControllerApi.selectCounselSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담일정 목록 조회
         * @param {number} page 
         * @param {number} size 
         * @param {string} [baseDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselSessionListByBaseDateAndCursorAndSize(page: number, size: number, baseDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResSelectCounselSessionListItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselSessionListByBaseDateAndCursorAndSize(page, size, baseDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselSessionControllerApi.selectCounselSessionListByBaseDateAndCursorAndSize']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 이전 상담 내역 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectPreviousCounselSessionList(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListSelectPreviousCounselSessionListRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectPreviousCounselSessionList(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselSessionControllerApi.selectPreviousCounselSessionList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 일정 상태 변경
         * @param {UpdateStatusInCounselSessionReq} updateStatusInCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounselSessionStatus(updateStatusInCounselSessionReq: UpdateStatusInCounselSessionReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResUpdateStatusInCounselSessionRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselSessionStatus(updateStatusInCounselSessionReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselSessionControllerApi.updateCounselSessionStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * req body에 counselorId 넣지 않은 경우 로그인 계정 정보로 할당됨.
         * @summary 상담일정 담당 약사 수정
         * @param {UpdateCounselorInCounselSessionReq} updateCounselorInCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounselorInCounselSession(updateCounselorInCounselSessionReq: UpdateCounselorInCounselSessionReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResUpdateCounselorInCounselSessionRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselorInCounselSession(updateCounselorInCounselSessionReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselSessionControllerApi.updateCounselorInCounselSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CounselSessionControllerApi - factory interface
 * @export
 */
export const CounselSessionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CounselSessionControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 상담세션(일정) 추가
         * @param {CreateCounselReservationReq} createCounselReservationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCounselReservation(createCounselReservationReq: CreateCounselReservationReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCreateCounselReservationRes> {
            return localVarFp.createCounselReservation(createCounselReservationReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담일정 삭제
         * @param {DeleteCounselSessionReq} deleteCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselSession(deleteCounselSessionReq: DeleteCounselSessionReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResDeleteCounselSessionRes> {
            return localVarFp.deleteCounselSession(deleteCounselSessionReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 특정 연월의 상담 세션이 있는 날짜 목록 조회
         * @param {number} year 
         * @param {number} month 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionDatesByYearAndMonth(year: number, month: number, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListLocalDate> {
            return localVarFp.getSessionDatesByYearAndMonth(year, month, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 세션 통계 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionStats(options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselSessionStatRes> {
            return localVarFp.getSessionStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담일정 수정
         * @param {ModifyCounselReservationReq} modifyCounselReservationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCounselReservation(modifyCounselReservationReq: ModifyCounselReservationReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResModifyCounselReservationRes> {
            return localVarFp.modifyCounselReservation(modifyCounselReservationReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담일정 검색 및 필터링
         * @param {number} page 
         * @param {number} size 
         * @param {string} [counseleeNameKeyword] 
         * @param {Array<string>} [counselorNames] 
         * @param {Array<string>} [scheduledDates] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCounselSessions(page: number, size: number, counseleeNameKeyword?: string, counselorNames?: Array<string>, scheduledDates?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<PageResSelectCounselSessionRes> {
            return localVarFp.searchCounselSessions(page, size, counseleeNameKeyword, counselorNames, scheduledDates, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담일정 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselSession(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectCounselSessionRes> {
            return localVarFp.selectCounselSession(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담일정 목록 조회
         * @param {number} page 
         * @param {number} size 
         * @param {string} [baseDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselSessionListByBaseDateAndCursorAndSize(page: number, size: number, baseDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<PageResSelectCounselSessionListItem> {
            return localVarFp.selectCounselSessionListByBaseDateAndCursorAndSize(page, size, baseDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 이전 상담 내역 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPreviousCounselSessionList(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListSelectPreviousCounselSessionListRes> {
            return localVarFp.selectPreviousCounselSessionList(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 일정 상태 변경
         * @param {UpdateStatusInCounselSessionReq} updateStatusInCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselSessionStatus(updateStatusInCounselSessionReq: UpdateStatusInCounselSessionReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResUpdateStatusInCounselSessionRes> {
            return localVarFp.updateCounselSessionStatus(updateStatusInCounselSessionReq, options).then((request) => request(axios, basePath));
        },
        /**
         * req body에 counselorId 넣지 않은 경우 로그인 계정 정보로 할당됨.
         * @summary 상담일정 담당 약사 수정
         * @param {UpdateCounselorInCounselSessionReq} updateCounselorInCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselorInCounselSession(updateCounselorInCounselSessionReq: UpdateCounselorInCounselSessionReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResUpdateCounselorInCounselSessionRes> {
            return localVarFp.updateCounselorInCounselSession(updateCounselorInCounselSessionReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CounselSessionControllerApi - object-oriented interface
 * @export
 * @class CounselSessionControllerApi
 * @extends {BaseAPI}
 */
export class CounselSessionControllerApi extends BaseAPI {
    /**
     * 
     * @summary 상담세션(일정) 추가
     * @param {CreateCounselReservationReq} createCounselReservationReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselSessionControllerApi
     */
    public createCounselReservation(createCounselReservationReq: CreateCounselReservationReq, options?: RawAxiosRequestConfig) {
        return CounselSessionControllerApiFp(this.configuration).createCounselReservation(createCounselReservationReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담일정 삭제
     * @param {DeleteCounselSessionReq} deleteCounselSessionReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselSessionControllerApi
     */
    public deleteCounselSession(deleteCounselSessionReq: DeleteCounselSessionReq, options?: RawAxiosRequestConfig) {
        return CounselSessionControllerApiFp(this.configuration).deleteCounselSession(deleteCounselSessionReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 특정 연월의 상담 세션이 있는 날짜 목록 조회
     * @param {number} year 
     * @param {number} month 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselSessionControllerApi
     */
    public getSessionDatesByYearAndMonth(year: number, month: number, options?: RawAxiosRequestConfig) {
        return CounselSessionControllerApiFp(this.configuration).getSessionDatesByYearAndMonth(year, month, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 세션 통계 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselSessionControllerApi
     */
    public getSessionStats(options?: RawAxiosRequestConfig) {
        return CounselSessionControllerApiFp(this.configuration).getSessionStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담일정 수정
     * @param {ModifyCounselReservationReq} modifyCounselReservationReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselSessionControllerApi
     */
    public modifyCounselReservation(modifyCounselReservationReq: ModifyCounselReservationReq, options?: RawAxiosRequestConfig) {
        return CounselSessionControllerApiFp(this.configuration).modifyCounselReservation(modifyCounselReservationReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담일정 검색 및 필터링
     * @param {number} page 
     * @param {number} size 
     * @param {string} [counseleeNameKeyword] 
     * @param {Array<string>} [counselorNames] 
     * @param {Array<string>} [scheduledDates] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselSessionControllerApi
     */
    public searchCounselSessions(page: number, size: number, counseleeNameKeyword?: string, counselorNames?: Array<string>, scheduledDates?: Array<string>, options?: RawAxiosRequestConfig) {
        return CounselSessionControllerApiFp(this.configuration).searchCounselSessions(page, size, counseleeNameKeyword, counselorNames, scheduledDates, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담일정 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselSessionControllerApi
     */
    public selectCounselSession(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return CounselSessionControllerApiFp(this.configuration).selectCounselSession(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담일정 목록 조회
     * @param {number} page 
     * @param {number} size 
     * @param {string} [baseDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselSessionControllerApi
     */
    public selectCounselSessionListByBaseDateAndCursorAndSize(page: number, size: number, baseDate?: string, options?: RawAxiosRequestConfig) {
        return CounselSessionControllerApiFp(this.configuration).selectCounselSessionListByBaseDateAndCursorAndSize(page, size, baseDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 이전 상담 내역 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselSessionControllerApi
     */
    public selectPreviousCounselSessionList(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return CounselSessionControllerApiFp(this.configuration).selectPreviousCounselSessionList(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 일정 상태 변경
     * @param {UpdateStatusInCounselSessionReq} updateStatusInCounselSessionReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselSessionControllerApi
     */
    public updateCounselSessionStatus(updateStatusInCounselSessionReq: UpdateStatusInCounselSessionReq, options?: RawAxiosRequestConfig) {
        return CounselSessionControllerApiFp(this.configuration).updateCounselSessionStatus(updateStatusInCounselSessionReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * req body에 counselorId 넣지 않은 경우 로그인 계정 정보로 할당됨.
     * @summary 상담일정 담당 약사 수정
     * @param {UpdateCounselorInCounselSessionReq} updateCounselorInCounselSessionReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselSessionControllerApi
     */
    public updateCounselorInCounselSession(updateCounselorInCounselSessionReq: UpdateCounselorInCounselSessionReq, options?: RawAxiosRequestConfig) {
        return CounselSessionControllerApiFp(this.configuration).updateCounselorInCounselSession(updateCounselorInCounselSessionReq, options).then((request) => request(this.axios, this.basePath));
    }
}

