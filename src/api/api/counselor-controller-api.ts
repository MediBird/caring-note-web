/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CounselorNameListRes } from '../models';
// @ts-ignore
import type { DeleteCounselor400Response } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { GetCounselorRes } from '../models';
// @ts-ignore
import type { PageResCounselorInfoListRes } from '../models';
// @ts-ignore
import type { ResetPasswordReq } from '../models';
// @ts-ignore
import type { UpdateCounselorReq } from '../models';
// @ts-ignore
import type { UpdateCounselorRes } from '../models';
// @ts-ignore
import type { UpdateRoleReq } from '../models';
/**
 * CounselorControllerApi - axios parameter creator
 * @export
 */
export const CounselorControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 상담사를 삭제한다. Keycloak에서도 해당 사용자를 삭제한다.
         * @summary 상담사 삭제
         * @param {string} counselorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselor: async (counselorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselorId' is not null or undefined
            assertParamExists('deleteCounselor', 'counselorId', counselorId)
            const localVarPath = `/v1/counselor/{counselorId}`
                .replace(`{${"counselorId"}}`, encodeURIComponent(String(counselorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 모든 상담사의 이름 목록을 조회한다. 결과는 캐싱됩니다.
         * @summary 상담사 이름 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCounselorNames: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/counselor/names`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 상담사 목록을 페이지네이션 형태로 조회한다.
         * @summary 상담사 목록 페이지네이션 조회
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCounselorsByPage: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/counselor/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 내 정보를 조회한다.
         * @summary 내 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/counselor/my-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 상담사의 비밀번호를 초기화한다. Keycloak에서 해당 사용자의 비밀번호를 초기화한다.
         * @summary 상담사 비밀번호 초기화
         * @param {string} counselorId 
         * @param {ResetPasswordReq} resetPasswordReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (counselorId: string, resetPasswordReq: ResetPasswordReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselorId' is not null or undefined
            assertParamExists('resetPassword', 'counselorId', counselorId)
            // verify required parameter 'resetPasswordReq' is not null or undefined
            assertParamExists('resetPassword', 'resetPasswordReq', resetPasswordReq)
            const localVarPath = `/v1/counselor/{counselorId}/reset-password`
                .replace(`{${"counselorId"}}`, encodeURIComponent(String(counselorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 상담사 정보를 업데이트한다.
         * @summary 상담사 정보 업데이트
         * @param {string} counselorId 
         * @param {UpdateCounselorReq} updateCounselorReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselor: async (counselorId: string, updateCounselorReq: UpdateCounselorReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselorId' is not null or undefined
            assertParamExists('updateCounselor', 'counselorId', counselorId)
            // verify required parameter 'updateCounselorReq' is not null or undefined
            assertParamExists('updateCounselor', 'updateCounselorReq', updateCounselorReq)
            const localVarPath = `/v1/counselor/{counselorId}`
                .replace(`{${"counselorId"}}`, encodeURIComponent(String(counselorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCounselorReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 상담사의 권한을 변경한다. DB와 Keycloak 모두에서 권한을 업데이트한다.
         * @summary 상담사 권한 변경
         * @param {string} counselorId 
         * @param {UpdateRoleReq} updateRoleReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (counselorId: string, updateRoleReq: UpdateRoleReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselorId' is not null or undefined
            assertParamExists('updateRole', 'counselorId', counselorId)
            // verify required parameter 'updateRoleReq' is not null or undefined
            assertParamExists('updateRole', 'updateRoleReq', updateRoleReq)
            const localVarPath = `/v1/counselor/{counselorId}/role`
                .replace(`{${"counselorId"}}`, encodeURIComponent(String(counselorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoleReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CounselorControllerApi - functional programming interface
 * @export
 */
export const CounselorControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CounselorControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 상담사를 삭제한다. Keycloak에서도 해당 사용자를 삭제한다.
         * @summary 상담사 삭제
         * @param {string} counselorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCounselor(counselorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCounselor(counselorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselorControllerApi.deleteCounselor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 모든 상담사의 이름 목록을 조회한다. 결과는 캐싱됩니다.
         * @summary 상담사 이름 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCounselorNames(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CounselorNameListRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCounselorNames(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselorControllerApi.getCounselorNames']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 상담사 목록을 페이지네이션 형태로 조회한다.
         * @summary 상담사 목록 페이지네이션 조회
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCounselorsByPage(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResCounselorInfoListRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCounselorsByPage(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselorControllerApi.getCounselorsByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 내 정보를 조회한다.
         * @summary 내 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCounselorRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselorControllerApi.getMyInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 상담사의 비밀번호를 초기화한다. Keycloak에서 해당 사용자의 비밀번호를 초기화한다.
         * @summary 상담사 비밀번호 초기화
         * @param {string} counselorId 
         * @param {ResetPasswordReq} resetPasswordReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(counselorId: string, resetPasswordReq: ResetPasswordReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(counselorId, resetPasswordReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselorControllerApi.resetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 상담사 정보를 업데이트한다.
         * @summary 상담사 정보 업데이트
         * @param {string} counselorId 
         * @param {UpdateCounselorReq} updateCounselorReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounselor(counselorId: string, updateCounselorReq: UpdateCounselorReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCounselorRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselor(counselorId, updateCounselorReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselorControllerApi.updateCounselor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 상담사의 권한을 변경한다. DB와 Keycloak 모두에서 권한을 업데이트한다.
         * @summary 상담사 권한 변경
         * @param {string} counselorId 
         * @param {UpdateRoleReq} updateRoleReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(counselorId: string, updateRoleReq: UpdateRoleReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCounselorRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(counselorId, updateRoleReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselorControllerApi.updateRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CounselorControllerApi - factory interface
 * @export
 */
export const CounselorControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CounselorControllerApiFp(configuration)
    return {
        /**
         * 상담사를 삭제한다. Keycloak에서도 해당 사용자를 삭제한다.
         * @summary 상담사 삭제
         * @param {string} counselorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselor(counselorId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCounselor(counselorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 모든 상담사의 이름 목록을 조회한다. 결과는 캐싱됩니다.
         * @summary 상담사 이름 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCounselorNames(options?: RawAxiosRequestConfig): AxiosPromise<CounselorNameListRes> {
            return localVarFp.getCounselorNames(options).then((request) => request(axios, basePath));
        },
        /**
         * 상담사 목록을 페이지네이션 형태로 조회한다.
         * @summary 상담사 목록 페이지네이션 조회
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCounselorsByPage(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<PageResCounselorInfoListRes> {
            return localVarFp.getCounselorsByPage(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 내 정보를 조회한다.
         * @summary 내 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyInfo(options?: RawAxiosRequestConfig): AxiosPromise<GetCounselorRes> {
            return localVarFp.getMyInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 상담사의 비밀번호를 초기화한다. Keycloak에서 해당 사용자의 비밀번호를 초기화한다.
         * @summary 상담사 비밀번호 초기화
         * @param {string} counselorId 
         * @param {ResetPasswordReq} resetPasswordReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(counselorId: string, resetPasswordReq: ResetPasswordReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resetPassword(counselorId, resetPasswordReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 상담사 정보를 업데이트한다.
         * @summary 상담사 정보 업데이트
         * @param {string} counselorId 
         * @param {UpdateCounselorReq} updateCounselorReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselor(counselorId: string, updateCounselorReq: UpdateCounselorReq, options?: RawAxiosRequestConfig): AxiosPromise<UpdateCounselorRes> {
            return localVarFp.updateCounselor(counselorId, updateCounselorReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 상담사의 권한을 변경한다. DB와 Keycloak 모두에서 권한을 업데이트한다.
         * @summary 상담사 권한 변경
         * @param {string} counselorId 
         * @param {UpdateRoleReq} updateRoleReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole(counselorId: string, updateRoleReq: UpdateRoleReq, options?: RawAxiosRequestConfig): AxiosPromise<UpdateCounselorRes> {
            return localVarFp.updateRole(counselorId, updateRoleReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CounselorControllerApi - object-oriented interface
 * @export
 * @class CounselorControllerApi
 * @extends {BaseAPI}
 */
export class CounselorControllerApi extends BaseAPI {
    /**
     * 상담사를 삭제한다. Keycloak에서도 해당 사용자를 삭제한다.
     * @summary 상담사 삭제
     * @param {string} counselorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselorControllerApi
     */
    public deleteCounselor(counselorId: string, options?: RawAxiosRequestConfig) {
        return CounselorControllerApiFp(this.configuration).deleteCounselor(counselorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 모든 상담사의 이름 목록을 조회한다. 결과는 캐싱됩니다.
     * @summary 상담사 이름 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselorControllerApi
     */
    public getCounselorNames(options?: RawAxiosRequestConfig) {
        return CounselorControllerApiFp(this.configuration).getCounselorNames(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 상담사 목록을 페이지네이션 형태로 조회한다.
     * @summary 상담사 목록 페이지네이션 조회
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselorControllerApi
     */
    public getCounselorsByPage(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return CounselorControllerApiFp(this.configuration).getCounselorsByPage(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 내 정보를 조회한다.
     * @summary 내 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselorControllerApi
     */
    public getMyInfo(options?: RawAxiosRequestConfig) {
        return CounselorControllerApiFp(this.configuration).getMyInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 상담사의 비밀번호를 초기화한다. Keycloak에서 해당 사용자의 비밀번호를 초기화한다.
     * @summary 상담사 비밀번호 초기화
     * @param {string} counselorId 
     * @param {ResetPasswordReq} resetPasswordReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselorControllerApi
     */
    public resetPassword(counselorId: string, resetPasswordReq: ResetPasswordReq, options?: RawAxiosRequestConfig) {
        return CounselorControllerApiFp(this.configuration).resetPassword(counselorId, resetPasswordReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 상담사 정보를 업데이트한다.
     * @summary 상담사 정보 업데이트
     * @param {string} counselorId 
     * @param {UpdateCounselorReq} updateCounselorReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselorControllerApi
     */
    public updateCounselor(counselorId: string, updateCounselorReq: UpdateCounselorReq, options?: RawAxiosRequestConfig) {
        return CounselorControllerApiFp(this.configuration).updateCounselor(counselorId, updateCounselorReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 상담사의 권한을 변경한다. DB와 Keycloak 모두에서 권한을 업데이트한다.
     * @summary 상담사 권한 변경
     * @param {string} counselorId 
     * @param {UpdateRoleReq} updateRoleReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselorControllerApi
     */
    public updateRole(counselorId: string, updateRoleReq: UpdateRoleReq, options?: RawAxiosRequestConfig) {
        return CounselorControllerApiFp(this.configuration).updateRole(counselorId, updateRoleReq, options).then((request) => request(this.axios, this.basePath));
    }
}

