/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddCounseleeReq } from '../models';
// @ts-ignore
import type { CommonResListDeleteCounseleeBatchRes } from '../models';
// @ts-ignore
import type { CommonResListLocalDate } from '../models';
// @ts-ignore
import type { CommonResListSelectCounseleeAutocompleteRes } from '../models';
// @ts-ignore
import type { CommonResListString } from '../models';
// @ts-ignore
import type { CommonResSelectCounseleeBaseInformationByCounseleeIdRes } from '../models';
// @ts-ignore
import type { CommonResSelectCounseleeRes } from '../models';
// @ts-ignore
import type { CommonResString } from '../models';
// @ts-ignore
import type { DeleteCounseleeBatchReq } from '../models';
// @ts-ignore
import type { DeleteCounselor400Response } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { PageResSelectCounseleeRes } from '../models';
// @ts-ignore
import type { UpdateCounseleeReq } from '../models';
/**
 * CounseleeControllerApi - axios parameter creator
 * @export
 */
export const CounseleeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 내담자 기본 정보 생성
         * @param {AddCounseleeReq} addCounseleeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCounselee: async (addCounseleeReq: AddCounseleeReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addCounseleeReq' is not null or undefined
            assertParamExists('addCounselee', 'addCounseleeReq', addCounseleeReq)
            const localVarPath = `/v1/counsel/counselee/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addCounseleeReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 이름 자동완성
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteCounselees: async (keyword: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('autocompleteCounselees', 'keyword', keyword)
            const localVarPath = `/v1/counsel/counselee/autocomplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 삭제
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselee: async (counseleeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counseleeId' is not null or undefined
            assertParamExists('deleteCounselee', 'counseleeId', counseleeId)
            const localVarPath = `/v1/counsel/counselee/{counseleeId}`
                .replace(`{${"counseleeId"}}`, encodeURIComponent(String(counseleeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 삭제(batch)
         * @param {Array<DeleteCounseleeBatchReq>} deleteCounseleeBatchReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounseleeBatch: async (deleteCounseleeBatchReq: Array<DeleteCounseleeBatchReq>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteCounseleeBatchReq' is not null or undefined
            assertParamExists('deleteCounseleeBatch', 'deleteCounseleeBatchReq', deleteCounseleeBatchReq)
            const localVarPath = `/v1/counsel/counselee/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCounseleeBatchReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연계 기관 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliatedWelfareInstitutions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/counsel/counselee/affiliated-welfare-institutions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 등록된 생년월일 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBirthDates: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/counsel/counselee/birth-dates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 상세 정보 조회
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselee: async (counseleeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counseleeId' is not null or undefined
            assertParamExists('selectCounselee', 'counseleeId', counseleeId)
            const localVarPath = `/v1/counsel/counselee/{counseleeId}`
                .replace(`{${"counseleeId"}}`, encodeURIComponent(String(counseleeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounseleeBaseInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounseleeBaseInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/counselee/{counselSessionId}/base/information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 목록 조회
         * @param {number} page 
         * @param {number} size 
         * @param {string} [name] 
         * @param {Array<string>} [birthDates] 
         * @param {Array<string>} [affiliatedWelfareInstitutions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselees: async (page: number, size: number, name?: string, birthDates?: Array<string>, affiliatedWelfareInstitutions?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('selectCounselees', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('selectCounselees', 'size', size)
            const localVarPath = `/v1/counsel/counselee/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (birthDates) {
                localVarQueryParameter['birthDates'] = birthDates;
            }

            if (affiliatedWelfareInstitutions) {
                localVarQueryParameter['affiliatedWelfareInstitutions'] = affiliatedWelfareInstitutions;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 기본 정보 수정
         * @param {UpdateCounseleeReq} updateCounseleeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselee: async (updateCounseleeReq: UpdateCounseleeReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCounseleeReq' is not null or undefined
            assertParamExists('updateCounselee', 'updateCounseleeReq', updateCounseleeReq)
            const localVarPath = `/v1/counsel/counselee/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCounseleeReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CounseleeControllerApi - functional programming interface
 * @export
 */
export const CounseleeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CounseleeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 내담자 기본 정보 생성
         * @param {AddCounseleeReq} addCounseleeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCounselee(addCounseleeReq: AddCounseleeReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCounselee(addCounseleeReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeControllerApi.addCounselee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 이름 자동완성
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteCounselees(keyword: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListSelectCounseleeAutocompleteRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autocompleteCounselees(keyword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeControllerApi.autocompleteCounselees']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 삭제
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCounselee(counseleeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCounselee(counseleeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeControllerApi.deleteCounselee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 삭제(batch)
         * @param {Array<DeleteCounseleeBatchReq>} deleteCounseleeBatchReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCounseleeBatch(deleteCounseleeBatchReq: Array<DeleteCounseleeBatchReq>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListDeleteCounseleeBatchRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCounseleeBatch(deleteCounseleeBatchReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeControllerApi.deleteCounseleeBatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 연계 기관 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAffiliatedWelfareInstitutions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAffiliatedWelfareInstitutions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeControllerApi.getAffiliatedWelfareInstitutions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 등록된 생년월일 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBirthDates(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListLocalDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBirthDates(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeControllerApi.getBirthDates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 상세 정보 조회
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselee(counseleeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectCounseleeRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselee(counseleeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeControllerApi.selectCounselee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounseleeBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectCounseleeBaseInformationByCounseleeIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounseleeBaseInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeControllerApi.selectCounseleeBaseInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 목록 조회
         * @param {number} page 
         * @param {number} size 
         * @param {string} [name] 
         * @param {Array<string>} [birthDates] 
         * @param {Array<string>} [affiliatedWelfareInstitutions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselees(page: number, size: number, name?: string, birthDates?: Array<string>, affiliatedWelfareInstitutions?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResSelectCounseleeRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselees(page, size, name, birthDates, affiliatedWelfareInstitutions, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeControllerApi.selectCounselees']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 기본 정보 수정
         * @param {UpdateCounseleeReq} updateCounseleeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounselee(updateCounseleeReq: UpdateCounseleeReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselee(updateCounseleeReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeControllerApi.updateCounselee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CounseleeControllerApi - factory interface
 * @export
 */
export const CounseleeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CounseleeControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 내담자 기본 정보 생성
         * @param {AddCounseleeReq} addCounseleeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCounselee(addCounseleeReq: AddCounseleeReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResString> {
            return localVarFp.addCounselee(addCounseleeReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 이름 자동완성
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteCounselees(keyword: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListSelectCounseleeAutocompleteRes> {
            return localVarFp.autocompleteCounselees(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 삭제
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselee(counseleeId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResString> {
            return localVarFp.deleteCounselee(counseleeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 삭제(batch)
         * @param {Array<DeleteCounseleeBatchReq>} deleteCounseleeBatchReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounseleeBatch(deleteCounseleeBatchReq: Array<DeleteCounseleeBatchReq>, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListDeleteCounseleeBatchRes> {
            return localVarFp.deleteCounseleeBatch(deleteCounseleeBatchReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연계 기관 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliatedWelfareInstitutions(options?: RawAxiosRequestConfig): AxiosPromise<CommonResListString> {
            return localVarFp.getAffiliatedWelfareInstitutions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 등록된 생년월일 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBirthDates(options?: RawAxiosRequestConfig): AxiosPromise<CommonResListLocalDate> {
            return localVarFp.getBirthDates(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 상세 정보 조회
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselee(counseleeId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectCounseleeRes> {
            return localVarFp.selectCounselee(counseleeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounseleeBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectCounseleeBaseInformationByCounseleeIdRes> {
            return localVarFp.selectCounseleeBaseInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 목록 조회
         * @param {number} page 
         * @param {number} size 
         * @param {string} [name] 
         * @param {Array<string>} [birthDates] 
         * @param {Array<string>} [affiliatedWelfareInstitutions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselees(page: number, size: number, name?: string, birthDates?: Array<string>, affiliatedWelfareInstitutions?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<PageResSelectCounseleeRes> {
            return localVarFp.selectCounselees(page, size, name, birthDates, affiliatedWelfareInstitutions, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 기본 정보 수정
         * @param {UpdateCounseleeReq} updateCounseleeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselee(updateCounseleeReq: UpdateCounseleeReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResString> {
            return localVarFp.updateCounselee(updateCounseleeReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CounseleeControllerApi - object-oriented interface
 * @export
 * @class CounseleeControllerApi
 * @extends {BaseAPI}
 */
export class CounseleeControllerApi extends BaseAPI {
    /**
     * 
     * @summary 내담자 기본 정보 생성
     * @param {AddCounseleeReq} addCounseleeReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeControllerApi
     */
    public addCounselee(addCounseleeReq: AddCounseleeReq, options?: RawAxiosRequestConfig) {
        return CounseleeControllerApiFp(this.configuration).addCounselee(addCounseleeReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 이름 자동완성
     * @param {string} keyword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeControllerApi
     */
    public autocompleteCounselees(keyword: string, options?: RawAxiosRequestConfig) {
        return CounseleeControllerApiFp(this.configuration).autocompleteCounselees(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 삭제
     * @param {string} counseleeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeControllerApi
     */
    public deleteCounselee(counseleeId: string, options?: RawAxiosRequestConfig) {
        return CounseleeControllerApiFp(this.configuration).deleteCounselee(counseleeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 삭제(batch)
     * @param {Array<DeleteCounseleeBatchReq>} deleteCounseleeBatchReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeControllerApi
     */
    public deleteCounseleeBatch(deleteCounseleeBatchReq: Array<DeleteCounseleeBatchReq>, options?: RawAxiosRequestConfig) {
        return CounseleeControllerApiFp(this.configuration).deleteCounseleeBatch(deleteCounseleeBatchReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연계 기관 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeControllerApi
     */
    public getAffiliatedWelfareInstitutions(options?: RawAxiosRequestConfig) {
        return CounseleeControllerApiFp(this.configuration).getAffiliatedWelfareInstitutions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 등록된 생년월일 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeControllerApi
     */
    public getBirthDates(options?: RawAxiosRequestConfig) {
        return CounseleeControllerApiFp(this.configuration).getBirthDates(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 상세 정보 조회
     * @param {string} counseleeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeControllerApi
     */
    public selectCounselee(counseleeId: string, options?: RawAxiosRequestConfig) {
        return CounseleeControllerApiFp(this.configuration).selectCounselee(counseleeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 기본 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeControllerApi
     */
    public selectCounseleeBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return CounseleeControllerApiFp(this.configuration).selectCounseleeBaseInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 목록 조회
     * @param {number} page 
     * @param {number} size 
     * @param {string} [name] 
     * @param {Array<string>} [birthDates] 
     * @param {Array<string>} [affiliatedWelfareInstitutions] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeControllerApi
     */
    public selectCounselees(page: number, size: number, name?: string, birthDates?: Array<string>, affiliatedWelfareInstitutions?: Array<string>, options?: RawAxiosRequestConfig) {
        return CounseleeControllerApiFp(this.configuration).selectCounselees(page, size, name, birthDates, affiliatedWelfareInstitutions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 기본 정보 수정
     * @param {UpdateCounseleeReq} updateCounseleeReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeControllerApi
     */
    public updateCounselee(updateCounseleeReq: UpdateCounseleeReq, options?: RawAxiosRequestConfig) {
        return CounseleeControllerApiFp(this.configuration).updateCounselee(updateCounseleeReq, options).then((request) => request(this.axios, this.basePath));
    }
}

