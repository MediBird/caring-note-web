/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResCounselCardBaseInformationRes } from '../models';
// @ts-ignore
import type { CommonResCounselCardHealthInformationRes } from '../models';
// @ts-ignore
import type { CommonResCounselCardIdRes } from '../models';
// @ts-ignore
import type { CommonResCounselCardIndependentLifeInformationRes } from '../models';
// @ts-ignore
import type { CommonResCounselCardLivingInformationRes } from '../models';
// @ts-ignore
import type { CommonResListTimeRecordedResObject } from '../models';
// @ts-ignore
import type { CommonResMainCounselBaseInformationRes } from '../models';
// @ts-ignore
import type { CommonResMainCounselHealthInformationRes } from '../models';
// @ts-ignore
import type { CommonResMainCounselIndependentLifeInformationRes } from '../models';
// @ts-ignore
import type { CommonResMainCounselLivingInformationRes } from '../models';
// @ts-ignore
import type { DeleteCounselor400Response } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { UpdateCounselCardReq } from '../models';
// @ts-ignore
import type { UpdateCounselCardStatusReq } from '../models';
/**
 * CounselCardControllerApi - axios parameter creator
 * @export
 */
export const CounselCardControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 상담 카드 삭제
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselCard: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('deleteCounselCard', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기초 설문용 상담 카드 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardBaseInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCardBaseInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/base-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기초 설문용 상담 카드 건강 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardHealthInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCardHealthInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/health-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기초 설문용 상담 카드 자립생활 역량 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardIndependentLifeInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCardIndependentLifeInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/independent-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기초 설문용 상담 카드 생활 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardLivingInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCardLivingInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/living-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 본 상담용 상담 카드 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMainCounselBaseInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectMainCounselBaseInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/main-counsel/{counselSessionId}/base-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 본 상담용 상담 카드 건강 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMainCounselHealthInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectMainCounselHealthInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/main-counsel/{counselSessionId}/health-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 본 상담용 상담 카드 자립생활 역량 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMainCounselIndependentLifeInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectMainCounselIndependentLifeInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/main-counsel/{counselSessionId}/independent-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 본 상담용 상담 카드 생활 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMainCounselLivingInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectMainCounselLivingInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/main-counsel/{counselSessionId}/living-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 이전 상담 카드 item 목록 조회
         * @param {string} counselSessionId 
         * @param {SelectPreviousItemListByInformationNameAndItemNameTypeEnum} type 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        selectPreviousItemListByInformationNameAndItemName: async (counselSessionId: string, type: SelectPreviousItemListByInformationNameAndItemNameTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectPreviousItemListByInformationNameAndItemName', 'counselSessionId', counselSessionId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('selectPreviousItemListByInformationNameAndItemName', 'type', type)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/previous/item/list`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 수정
         * @param {string} counselSessionId 
         * @param {UpdateCounselCardReq} updateCounselCardReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselCard: async (counselSessionId: string, updateCounselCardReq: UpdateCounselCardReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('updateCounselCard', 'counselSessionId', counselSessionId)
            // verify required parameter 'updateCounselCardReq' is not null or undefined
            assertParamExists('updateCounselCard', 'updateCounselCardReq', updateCounselCardReq)
            const localVarPath = `/v1/counsel/card/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCounselCardReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 상태 수정
         * @param {string} counselSessionId 
         * @param {UpdateCounselCardStatusReq} updateCounselCardStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselCardStatus: async (counselSessionId: string, updateCounselCardStatusReq: UpdateCounselCardStatusReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('updateCounselCardStatus', 'counselSessionId', counselSessionId)
            // verify required parameter 'updateCounselCardStatusReq' is not null or undefined
            assertParamExists('updateCounselCardStatus', 'updateCounselCardStatusReq', updateCounselCardStatusReq)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/status`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCounselCardStatusReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CounselCardControllerApi - functional programming interface
 * @export
 */
export const CounselCardControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CounselCardControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 상담 카드 삭제
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCounselCard(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCounselCard(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselCardControllerApi.deleteCounselCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 기초 설문용 상담 카드 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselCardBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardBaseInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCardBaseInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselCardControllerApi.selectCounselCardBaseInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 기초 설문용 상담 카드 건강 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselCardHealthInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardHealthInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCardHealthInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselCardControllerApi.selectCounselCardHealthInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 기초 설문용 상담 카드 자립생활 역량 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselCardIndependentLifeInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardIndependentLifeInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCardIndependentLifeInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselCardControllerApi.selectCounselCardIndependentLifeInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 기초 설문용 상담 카드 생활 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselCardLivingInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardLivingInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCardLivingInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselCardControllerApi.selectCounselCardLivingInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 본 상담용 상담 카드 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectMainCounselBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResMainCounselBaseInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectMainCounselBaseInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselCardControllerApi.selectMainCounselBaseInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 본 상담용 상담 카드 건강 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectMainCounselHealthInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResMainCounselHealthInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectMainCounselHealthInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselCardControllerApi.selectMainCounselHealthInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 본 상담용 상담 카드 자립생활 역량 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectMainCounselIndependentLifeInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResMainCounselIndependentLifeInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectMainCounselIndependentLifeInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselCardControllerApi.selectMainCounselIndependentLifeInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 본 상담용 상담 카드 생활 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectMainCounselLivingInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResMainCounselLivingInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectMainCounselLivingInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselCardControllerApi.selectMainCounselLivingInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 이전 상담 카드 item 목록 조회
         * @param {string} counselSessionId 
         * @param {SelectPreviousItemListByInformationNameAndItemNameTypeEnum} type 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async selectPreviousItemListByInformationNameAndItemName(counselSessionId: string, type: SelectPreviousItemListByInformationNameAndItemNameTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListTimeRecordedResObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectPreviousItemListByInformationNameAndItemName(counselSessionId, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselCardControllerApi.selectPreviousItemListByInformationNameAndItemName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 수정
         * @param {string} counselSessionId 
         * @param {UpdateCounselCardReq} updateCounselCardReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounselCard(counselSessionId: string, updateCounselCardReq: UpdateCounselCardReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselCard(counselSessionId, updateCounselCardReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselCardControllerApi.updateCounselCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 상태 수정
         * @param {string} counselSessionId 
         * @param {UpdateCounselCardStatusReq} updateCounselCardStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounselCardStatus(counselSessionId: string, updateCounselCardStatusReq: UpdateCounselCardStatusReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselCardStatus(counselSessionId, updateCounselCardStatusReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounselCardControllerApi.updateCounselCardStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CounselCardControllerApi - factory interface
 * @export
 */
export const CounselCardControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CounselCardControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 상담 카드 삭제
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselCard(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardIdRes> {
            return localVarFp.deleteCounselCard(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기초 설문용 상담 카드 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardBaseInformationRes> {
            return localVarFp.selectCounselCardBaseInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기초 설문용 상담 카드 건강 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardHealthInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardHealthInformationRes> {
            return localVarFp.selectCounselCardHealthInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기초 설문용 상담 카드 자립생활 역량 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardIndependentLifeInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardIndependentLifeInformationRes> {
            return localVarFp.selectCounselCardIndependentLifeInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기초 설문용 상담 카드 생활 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardLivingInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardLivingInformationRes> {
            return localVarFp.selectCounselCardLivingInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 본 상담용 상담 카드 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMainCounselBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResMainCounselBaseInformationRes> {
            return localVarFp.selectMainCounselBaseInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 본 상담용 상담 카드 건강 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMainCounselHealthInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResMainCounselHealthInformationRes> {
            return localVarFp.selectMainCounselHealthInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 본 상담용 상담 카드 자립생활 역량 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMainCounselIndependentLifeInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResMainCounselIndependentLifeInformationRes> {
            return localVarFp.selectMainCounselIndependentLifeInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 본 상담용 상담 카드 생활 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMainCounselLivingInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResMainCounselLivingInformationRes> {
            return localVarFp.selectMainCounselLivingInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 이전 상담 카드 item 목록 조회
         * @param {string} counselSessionId 
         * @param {SelectPreviousItemListByInformationNameAndItemNameTypeEnum} type 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        selectPreviousItemListByInformationNameAndItemName(counselSessionId: string, type: SelectPreviousItemListByInformationNameAndItemNameTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListTimeRecordedResObject> {
            return localVarFp.selectPreviousItemListByInformationNameAndItemName(counselSessionId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 수정
         * @param {string} counselSessionId 
         * @param {UpdateCounselCardReq} updateCounselCardReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselCard(counselSessionId: string, updateCounselCardReq: UpdateCounselCardReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardIdRes> {
            return localVarFp.updateCounselCard(counselSessionId, updateCounselCardReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 상태 수정
         * @param {string} counselSessionId 
         * @param {UpdateCounselCardStatusReq} updateCounselCardStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselCardStatus(counselSessionId: string, updateCounselCardStatusReq: UpdateCounselCardStatusReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardIdRes> {
            return localVarFp.updateCounselCardStatus(counselSessionId, updateCounselCardStatusReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CounselCardControllerApi - object-oriented interface
 * @export
 * @class CounselCardControllerApi
 * @extends {BaseAPI}
 */
export class CounselCardControllerApi extends BaseAPI {
    /**
     * 
     * @summary 상담 카드 삭제
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselCardControllerApi
     */
    public deleteCounselCard(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return CounselCardControllerApiFp(this.configuration).deleteCounselCard(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기초 설문용 상담 카드 기본 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselCardControllerApi
     */
    public selectCounselCardBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return CounselCardControllerApiFp(this.configuration).selectCounselCardBaseInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기초 설문용 상담 카드 건강 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselCardControllerApi
     */
    public selectCounselCardHealthInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return CounselCardControllerApiFp(this.configuration).selectCounselCardHealthInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기초 설문용 상담 카드 자립생활 역량 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselCardControllerApi
     */
    public selectCounselCardIndependentLifeInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return CounselCardControllerApiFp(this.configuration).selectCounselCardIndependentLifeInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기초 설문용 상담 카드 생활 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselCardControllerApi
     */
    public selectCounselCardLivingInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return CounselCardControllerApiFp(this.configuration).selectCounselCardLivingInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 본 상담용 상담 카드 기본 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselCardControllerApi
     */
    public selectMainCounselBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return CounselCardControllerApiFp(this.configuration).selectMainCounselBaseInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 본 상담용 상담 카드 건강 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselCardControllerApi
     */
    public selectMainCounselHealthInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return CounselCardControllerApiFp(this.configuration).selectMainCounselHealthInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 본 상담용 상담 카드 자립생활 역량 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselCardControllerApi
     */
    public selectMainCounselIndependentLifeInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return CounselCardControllerApiFp(this.configuration).selectMainCounselIndependentLifeInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 본 상담용 상담 카드 생활 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselCardControllerApi
     */
    public selectMainCounselLivingInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return CounselCardControllerApiFp(this.configuration).selectMainCounselLivingInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 이전 상담 카드 item 목록 조회
     * @param {string} counselSessionId 
     * @param {SelectPreviousItemListByInformationNameAndItemNameTypeEnum} type 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CounselCardControllerApi
     */
    public selectPreviousItemListByInformationNameAndItemName(counselSessionId: string, type: SelectPreviousItemListByInformationNameAndItemNameTypeEnum, options?: RawAxiosRequestConfig) {
        return CounselCardControllerApiFp(this.configuration).selectPreviousItemListByInformationNameAndItemName(counselSessionId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 수정
     * @param {string} counselSessionId 
     * @param {UpdateCounselCardReq} updateCounselCardReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselCardControllerApi
     */
    public updateCounselCard(counselSessionId: string, updateCounselCardReq: UpdateCounselCardReq, options?: RawAxiosRequestConfig) {
        return CounselCardControllerApiFp(this.configuration).updateCounselCard(counselSessionId, updateCounselCardReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 상태 수정
     * @param {string} counselSessionId 
     * @param {UpdateCounselCardStatusReq} updateCounselCardStatusReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounselCardControllerApi
     */
    public updateCounselCardStatus(counselSessionId: string, updateCounselCardStatusReq: UpdateCounselCardStatusReq, options?: RawAxiosRequestConfig) {
        return CounselCardControllerApiFp(this.configuration).updateCounselCardStatus(counselSessionId, updateCounselCardStatusReq, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SelectPreviousItemListByInformationNameAndItemNameTypeEnum = {
    Smoking: 'SMOKING',
    Drinking: 'DRINKING',
    Nutrition: 'NUTRITION',
    Exercise: 'EXERCISE',
    MedicationManagement: 'MEDICATION_MANAGEMENT',
    DiseaseInfo: 'DISEASE_INFO',
    Allergy: 'ALLERGY',
    MedicationSideEffect: 'MEDICATION_SIDE_EFFECT',
    CounselPurposeAndNote: 'COUNSEL_PURPOSE_AND_NOTE',
    Communication: 'COMMUNICATION',
    Evacuation: 'EVACUATION',
    Walking: 'WALKING'
} as const;
export type SelectPreviousItemListByInformationNameAndItemNameTypeEnum = typeof SelectPreviousItemListByInformationNameAndItemNameTypeEnum[keyof typeof SelectPreviousItemListByInformationNameAndItemNameTypeEnum];
