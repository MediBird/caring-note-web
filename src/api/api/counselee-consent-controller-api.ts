/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddCounseleeConsentReq } from '../models';
// @ts-ignore
import type { CommonResAddCounseleeConsentRes } from '../models';
// @ts-ignore
import type { CommonResDeleteCounseleeConsentRes } from '../models';
// @ts-ignore
import type { CommonResSelectCounseleeConsentByCounseleeIdRes } from '../models';
// @ts-ignore
import type { CommonResUpdateCounseleeConsentRes } from '../models';
// @ts-ignore
import type { DeleteCounselor400Response } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { UpdateCounseleeConsentReq } from '../models';
/**
 * CounseleeConsentControllerApi - axios parameter creator
 * @export
 */
export const CounseleeConsentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 내담자 개인정보 수집 동의
         * @param {string} counseleeConsentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCounseleeConsent: async (counseleeConsentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counseleeConsentId' is not null or undefined
            assertParamExists('acceptCounseleeConsent', 'counseleeConsentId', counseleeConsentId)
            const localVarPath = `/v1/counselee/consent/{counseleeConsentId}`
                .replace(`{${"counseleeConsentId"}}`, encodeURIComponent(String(counseleeConsentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 등록
         * @param {AddCounseleeConsentReq} addCounseleeConsentReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        addCounseleeConsent: async (addCounseleeConsentReq: AddCounseleeConsentReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addCounseleeConsentReq' is not null or undefined
            assertParamExists('addCounseleeConsent', 'addCounseleeConsentReq', addCounseleeConsentReq)
            const localVarPath = `/v1/counselee/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addCounseleeConsentReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 삭제
         * @param {string} counseleeConsentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounseleeConsent: async (counseleeConsentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counseleeConsentId' is not null or undefined
            assertParamExists('deleteCounseleeConsent', 'counseleeConsentId', counseleeConsentId)
            const localVarPath = `/v1/counselee/consent/{counseleeConsentId}`
                .replace(`{${"counseleeConsentId"}}`, encodeURIComponent(String(counseleeConsentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 조회
         * @param {string} counselSessionId 
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounseleeConsentByCounseleeId: async (counselSessionId: string, counseleeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounseleeConsentByCounseleeId', 'counselSessionId', counselSessionId)
            // verify required parameter 'counseleeId' is not null or undefined
            assertParamExists('selectCounseleeConsentByCounseleeId', 'counseleeId', counseleeId)
            const localVarPath = `/v1/counselee/consent/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (counseleeId !== undefined) {
                localVarQueryParameter['counseleeId'] = counseleeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 수정
         * @param {UpdateCounseleeConsentReq} updateCounseleeConsentReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCounseleeConsent: async (updateCounseleeConsentReq: UpdateCounseleeConsentReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCounseleeConsentReq' is not null or undefined
            assertParamExists('updateCounseleeConsent', 'updateCounseleeConsentReq', updateCounseleeConsentReq)
            const localVarPath = `/v1/counselee/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCounseleeConsentReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CounseleeConsentControllerApi - functional programming interface
 * @export
 */
export const CounseleeConsentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CounseleeConsentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 내담자 개인정보 수집 동의
         * @param {string} counseleeConsentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptCounseleeConsent(counseleeConsentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResUpdateCounseleeConsentRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptCounseleeConsent(counseleeConsentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeConsentControllerApi.acceptCounseleeConsent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 등록
         * @param {AddCounseleeConsentReq} addCounseleeConsentReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async addCounseleeConsent(addCounseleeConsentReq: AddCounseleeConsentReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResAddCounseleeConsentRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCounseleeConsent(addCounseleeConsentReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeConsentControllerApi.addCounseleeConsent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 삭제
         * @param {string} counseleeConsentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCounseleeConsent(counseleeConsentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResDeleteCounseleeConsentRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCounseleeConsent(counseleeConsentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeConsentControllerApi.deleteCounseleeConsent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 조회
         * @param {string} counselSessionId 
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounseleeConsentByCounseleeId(counselSessionId: string, counseleeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectCounseleeConsentByCounseleeIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounseleeConsentByCounseleeId(counselSessionId, counseleeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeConsentControllerApi.selectCounseleeConsentByCounseleeId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 수정
         * @param {UpdateCounseleeConsentReq} updateCounseleeConsentReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async updateCounseleeConsent(updateCounseleeConsentReq: UpdateCounseleeConsentReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResUpdateCounseleeConsentRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounseleeConsent(updateCounseleeConsentReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounseleeConsentControllerApi.updateCounseleeConsent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CounseleeConsentControllerApi - factory interface
 * @export
 */
export const CounseleeConsentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CounseleeConsentControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 내담자 개인정보 수집 동의
         * @param {string} counseleeConsentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCounseleeConsent(counseleeConsentId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResUpdateCounseleeConsentRes> {
            return localVarFp.acceptCounseleeConsent(counseleeConsentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 등록
         * @param {AddCounseleeConsentReq} addCounseleeConsentReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        addCounseleeConsent(addCounseleeConsentReq: AddCounseleeConsentReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResAddCounseleeConsentRes> {
            return localVarFp.addCounseleeConsent(addCounseleeConsentReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 삭제
         * @param {string} counseleeConsentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounseleeConsent(counseleeConsentId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResDeleteCounseleeConsentRes> {
            return localVarFp.deleteCounseleeConsent(counseleeConsentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 조회
         * @param {string} counselSessionId 
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounseleeConsentByCounseleeId(counselSessionId: string, counseleeId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectCounseleeConsentByCounseleeIdRes> {
            return localVarFp.selectCounseleeConsentByCounseleeId(counselSessionId, counseleeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 수정
         * @param {UpdateCounseleeConsentReq} updateCounseleeConsentReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCounseleeConsent(updateCounseleeConsentReq: UpdateCounseleeConsentReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResUpdateCounseleeConsentRes> {
            return localVarFp.updateCounseleeConsent(updateCounseleeConsentReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CounseleeConsentControllerApi - object-oriented interface
 * @export
 * @class CounseleeConsentControllerApi
 * @extends {BaseAPI}
 */
export class CounseleeConsentControllerApi extends BaseAPI {
    /**
     * 
     * @summary 내담자 개인정보 수집 동의
     * @param {string} counseleeConsentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeConsentControllerApi
     */
    public acceptCounseleeConsent(counseleeConsentId: string, options?: RawAxiosRequestConfig) {
        return CounseleeConsentControllerApiFp(this.configuration).acceptCounseleeConsent(counseleeConsentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 개인정보 수집 동의 여부 등록
     * @param {AddCounseleeConsentReq} addCounseleeConsentReq 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CounseleeConsentControllerApi
     */
    public addCounseleeConsent(addCounseleeConsentReq: AddCounseleeConsentReq, options?: RawAxiosRequestConfig) {
        return CounseleeConsentControllerApiFp(this.configuration).addCounseleeConsent(addCounseleeConsentReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 개인정보 수집 동의 여부 삭제
     * @param {string} counseleeConsentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeConsentControllerApi
     */
    public deleteCounseleeConsent(counseleeConsentId: string, options?: RawAxiosRequestConfig) {
        return CounseleeConsentControllerApiFp(this.configuration).deleteCounseleeConsent(counseleeConsentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 개인정보 수집 동의 여부 조회
     * @param {string} counselSessionId 
     * @param {string} counseleeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounseleeConsentControllerApi
     */
    public selectCounseleeConsentByCounseleeId(counselSessionId: string, counseleeId: string, options?: RawAxiosRequestConfig) {
        return CounseleeConsentControllerApiFp(this.configuration).selectCounseleeConsentByCounseleeId(counselSessionId, counseleeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 개인정보 수집 동의 여부 수정
     * @param {UpdateCounseleeConsentReq} updateCounseleeConsentReq 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CounseleeConsentControllerApi
     */
    public updateCounseleeConsent(updateCounseleeConsentReq: UpdateCounseleeConsentReq, options?: RawAxiosRequestConfig) {
        return CounseleeConsentControllerApiFp(this.configuration).updateCounseleeConsent(updateCounseleeConsentReq, options).then((request) => request(this.axios, this.basePath));
    }
}

