/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddAndUpdateWasteMedicationRecordReq } from '../models';
// @ts-ignore
import type { CommonResListAddAndUpdateWasteMedicationRecordRes } from '../models';
// @ts-ignore
import type { CommonResListSelectMedicationRecordListBySessionIdRes } from '../models';
// @ts-ignore
import type { CommonResString } from '../models';
// @ts-ignore
import type { CommonResVoid } from '../models';
// @ts-ignore
import type { CommonResWasteMedicationDisposalRes } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { WasteMedicationDisposalReq } from '../models';
/**
 * WasteMedicationControllerApi - axios parameter creator
 * @export
 */
export const WasteMedicationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 폐의약품 추가 및 업데이트
         * @param {string} counselSessionId 
         * @param {Array<AddAndUpdateWasteMedicationRecordReq>} addAndUpdateWasteMedicationRecordReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAndUpdateWasteMedicationRecord: async (counselSessionId: string, addAndUpdateWasteMedicationRecordReq: Array<AddAndUpdateWasteMedicationRecordReq>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('addAndUpdateWasteMedicationRecord', 'counselSessionId', counselSessionId)
            // verify required parameter 'addAndUpdateWasteMedicationRecordReq' is not null or undefined
            assertParamExists('addAndUpdateWasteMedicationRecord', 'addAndUpdateWasteMedicationRecordReq', addAndUpdateWasteMedicationRecordReq)
            const localVarPath = `/v1/counsel/medication/waste/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addAndUpdateWasteMedicationRecordReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 추가 혹은 업데이트
         * @param {string} counselSessionId 
         * @param {WasteMedicationDisposalReq} wasteMedicationDisposalReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWasteMedicationDisposal: async (counselSessionId: string, wasteMedicationDisposalReq: WasteMedicationDisposalReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('addWasteMedicationDisposal', 'counselSessionId', counselSessionId)
            // verify required parameter 'wasteMedicationDisposalReq' is not null or undefined
            assertParamExists('addWasteMedicationDisposal', 'wasteMedicationDisposalReq', wasteMedicationDisposalReq)
            const localVarPath = `/v1/counsel/medication/waste/disposal/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(wasteMedicationDisposalReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 삭제
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWasteMedicationDisposal: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('deleteWasteMedicationDisposal', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/medication/waste/disposal/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐의약품 삭제
         * @param {string} counselSessionId 
         * @param {string} wasteMedicationRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWasteMedicationRecord: async (counselSessionId: string, wasteMedicationRecordId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('deleteWasteMedicationRecord', 'counselSessionId', counselSessionId)
            // verify required parameter 'wasteMedicationRecordId' is not null or undefined
            assertParamExists('deleteWasteMedicationRecord', 'wasteMedicationRecordId', wasteMedicationRecordId)
            const localVarPath = `/v1/counsel/medication/waste/{counselSessionId}/{wasteMedicationRecordId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)))
                .replace(`{${"wasteMedicationRecordId"}}`, encodeURIComponent(String(wasteMedicationRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWasteMedicationDisposal: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('getWasteMedicationDisposal', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/medication/waste/disposal/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐의약품 리스트 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMedicationRecordListBySessionId: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectMedicationRecordListBySessionId', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/medication/waste/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WasteMedicationControllerApi - functional programming interface
 * @export
 */
export const WasteMedicationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WasteMedicationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 폐의약품 추가 및 업데이트
         * @param {string} counselSessionId 
         * @param {Array<AddAndUpdateWasteMedicationRecordReq>} addAndUpdateWasteMedicationRecordReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAndUpdateWasteMedicationRecord(counselSessionId: string, addAndUpdateWasteMedicationRecordReq: Array<AddAndUpdateWasteMedicationRecordReq>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListAddAndUpdateWasteMedicationRecordRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAndUpdateWasteMedicationRecord(counselSessionId, addAndUpdateWasteMedicationRecordReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WasteMedicationControllerApi.addAndUpdateWasteMedicationRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 추가 혹은 업데이트
         * @param {string} counselSessionId 
         * @param {WasteMedicationDisposalReq} wasteMedicationDisposalReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addWasteMedicationDisposal(counselSessionId: string, wasteMedicationDisposalReq: WasteMedicationDisposalReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addWasteMedicationDisposal(counselSessionId, wasteMedicationDisposalReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WasteMedicationControllerApi.addWasteMedicationDisposal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 삭제
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWasteMedicationDisposal(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWasteMedicationDisposal(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WasteMedicationControllerApi.deleteWasteMedicationDisposal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 폐의약품 삭제
         * @param {string} counselSessionId 
         * @param {string} wasteMedicationRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWasteMedicationRecord(counselSessionId: string, wasteMedicationRecordId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWasteMedicationRecord(counselSessionId, wasteMedicationRecordId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WasteMedicationControllerApi.deleteWasteMedicationRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWasteMedicationDisposal(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResWasteMedicationDisposalRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWasteMedicationDisposal(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WasteMedicationControllerApi.getWasteMedicationDisposal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 폐의약품 리스트 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectMedicationRecordListBySessionId(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListSelectMedicationRecordListBySessionIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectMedicationRecordListBySessionId(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WasteMedicationControllerApi.selectMedicationRecordListBySessionId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WasteMedicationControllerApi - factory interface
 * @export
 */
export const WasteMedicationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WasteMedicationControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 폐의약품 추가 및 업데이트
         * @param {string} counselSessionId 
         * @param {Array<AddAndUpdateWasteMedicationRecordReq>} addAndUpdateWasteMedicationRecordReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAndUpdateWasteMedicationRecord(counselSessionId: string, addAndUpdateWasteMedicationRecordReq: Array<AddAndUpdateWasteMedicationRecordReq>, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListAddAndUpdateWasteMedicationRecordRes> {
            return localVarFp.addAndUpdateWasteMedicationRecord(counselSessionId, addAndUpdateWasteMedicationRecordReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 추가 혹은 업데이트
         * @param {string} counselSessionId 
         * @param {WasteMedicationDisposalReq} wasteMedicationDisposalReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWasteMedicationDisposal(counselSessionId: string, wasteMedicationDisposalReq: WasteMedicationDisposalReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResString> {
            return localVarFp.addWasteMedicationDisposal(counselSessionId, wasteMedicationDisposalReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 삭제
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWasteMedicationDisposal(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResVoid> {
            return localVarFp.deleteWasteMedicationDisposal(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐의약품 삭제
         * @param {string} counselSessionId 
         * @param {string} wasteMedicationRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWasteMedicationRecord(counselSessionId: string, wasteMedicationRecordId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResVoid> {
            return localVarFp.deleteWasteMedicationRecord(counselSessionId, wasteMedicationRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWasteMedicationDisposal(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResWasteMedicationDisposalRes> {
            return localVarFp.getWasteMedicationDisposal(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐의약품 리스트 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMedicationRecordListBySessionId(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListSelectMedicationRecordListBySessionIdRes> {
            return localVarFp.selectMedicationRecordListBySessionId(counselSessionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WasteMedicationControllerApi - object-oriented interface
 * @export
 * @class WasteMedicationControllerApi
 * @extends {BaseAPI}
 */
export class WasteMedicationControllerApi extends BaseAPI {
    /**
     * 
     * @summary 폐의약품 추가 및 업데이트
     * @param {string} counselSessionId 
     * @param {Array<AddAndUpdateWasteMedicationRecordReq>} addAndUpdateWasteMedicationRecordReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WasteMedicationControllerApi
     */
    public addAndUpdateWasteMedicationRecord(counselSessionId: string, addAndUpdateWasteMedicationRecordReq: Array<AddAndUpdateWasteMedicationRecordReq>, options?: RawAxiosRequestConfig) {
        return WasteMedicationControllerApiFp(this.configuration).addAndUpdateWasteMedicationRecord(counselSessionId, addAndUpdateWasteMedicationRecordReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐의약품 폐기 정보 추가 혹은 업데이트
     * @param {string} counselSessionId 
     * @param {WasteMedicationDisposalReq} wasteMedicationDisposalReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WasteMedicationControllerApi
     */
    public addWasteMedicationDisposal(counselSessionId: string, wasteMedicationDisposalReq: WasteMedicationDisposalReq, options?: RawAxiosRequestConfig) {
        return WasteMedicationControllerApiFp(this.configuration).addWasteMedicationDisposal(counselSessionId, wasteMedicationDisposalReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐의약품 폐기 정보 삭제
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WasteMedicationControllerApi
     */
    public deleteWasteMedicationDisposal(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return WasteMedicationControllerApiFp(this.configuration).deleteWasteMedicationDisposal(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐의약품 삭제
     * @param {string} counselSessionId 
     * @param {string} wasteMedicationRecordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WasteMedicationControllerApi
     */
    public deleteWasteMedicationRecord(counselSessionId: string, wasteMedicationRecordId: string, options?: RawAxiosRequestConfig) {
        return WasteMedicationControllerApiFp(this.configuration).deleteWasteMedicationRecord(counselSessionId, wasteMedicationRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐의약품 폐기 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WasteMedicationControllerApi
     */
    public getWasteMedicationDisposal(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return WasteMedicationControllerApiFp(this.configuration).getWasteMedicationDisposal(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐의약품 리스트 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WasteMedicationControllerApi
     */
    public selectMedicationRecordListBySessionId(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return WasteMedicationControllerApiFp(this.configuration).selectMedicationRecordListBySessionId(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }
}

