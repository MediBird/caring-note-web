/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddAndUpdateMedicationRecordHistReq } from '../models';
// @ts-ignore
import type { AddAndUpdateWasteMedicationRecordReq } from '../models';
// @ts-ignore
import type { AddCounseleeConsentReq } from '../models';
// @ts-ignore
import type { AddCounseleeReq } from '../models';
// @ts-ignore
import type { AddMedicationCounselReq } from '../models';
// @ts-ignore
import type { CommonCursorResListSelectCounselSessionListItem } from '../models';
// @ts-ignore
import type { CommonResAddCounseleeConsentRes } from '../models';
// @ts-ignore
import type { CommonResAddMedicationCounselRes } from '../models';
// @ts-ignore
import type { CommonResCounselCardBaseInformationRes } from '../models';
// @ts-ignore
import type { CommonResCounselCardHealthInformationRes } from '../models';
// @ts-ignore
import type { CommonResCounselCardIdRes } from '../models';
// @ts-ignore
import type { CommonResCounselCardIndependentLifeInformationRes } from '../models';
// @ts-ignore
import type { CommonResCounselCardLivingInformationRes } from '../models';
// @ts-ignore
import type { CommonResCounselCardRes } from '../models';
// @ts-ignore
import type { CommonResCreateCounselReservationRes } from '../models';
// @ts-ignore
import type { CommonResDeleteCounselSessionRes } from '../models';
// @ts-ignore
import type { CommonResDeleteCounseleeConsentRes } from '../models';
// @ts-ignore
import type { CommonResDeleteMedicationCounselRes } from '../models';
// @ts-ignore
import type { CommonResListAddAndUpdateMedicationRecordHistRes } from '../models';
// @ts-ignore
import type { CommonResListAddAndUpdateWasteMedicationRecordRes } from '../models';
// @ts-ignore
import type { CommonResListDeleteCounseleeBatchRes } from '../models';
// @ts-ignore
import type { CommonResListLocalDate } from '../models';
// @ts-ignore
import type { CommonResListSearchMedicationByKeywordRes } from '../models';
// @ts-ignore
import type { CommonResListSelectCounseleeAutocompleteRes } from '../models';
// @ts-ignore
import type { CommonResListSelectMedicationRecordHistRes } from '../models';
// @ts-ignore
import type { CommonResListSelectMedicationRecordListBySessionIdRes } from '../models';
// @ts-ignore
import type { CommonResListSelectPreviousCounselSessionListRes } from '../models';
// @ts-ignore
import type { CommonResListString } from '../models';
// @ts-ignore
import type { CommonResListTimeRecordedResObject } from '../models';
// @ts-ignore
import type { CommonResModifyCounselReservationRes } from '../models';
// @ts-ignore
import type { CommonResSelectCounselSessionPageRes } from '../models';
// @ts-ignore
import type { CommonResSelectCounselSessionRes } from '../models';
// @ts-ignore
import type { CommonResSelectCounseleeBaseInformationByCounseleeIdRes } from '../models';
// @ts-ignore
import type { CommonResSelectCounseleeConsentByCounseleeIdRes } from '../models';
// @ts-ignore
import type { CommonResSelectCounseleePageRes } from '../models';
// @ts-ignore
import type { CommonResSelectCounseleeRes } from '../models';
// @ts-ignore
import type { CommonResSelectMedicationCounselRes } from '../models';
// @ts-ignore
import type { CommonResSelectPreviousMedicationCounselRes } from '../models';
// @ts-ignore
import type { CommonResString } from '../models';
// @ts-ignore
import type { CommonResUpdateCounseleeConsentRes } from '../models';
// @ts-ignore
import type { CommonResUpdateCounselorInCounselSessionRes } from '../models';
// @ts-ignore
import type { CommonResUpdateMedicationCounselRes } from '../models';
// @ts-ignore
import type { CommonResUpdateStatusInCounselSessionRes } from '../models';
// @ts-ignore
import type { CommonResVoid } from '../models';
// @ts-ignore
import type { CommonResWasteMedicationDisposalRes } from '../models';
// @ts-ignore
import type { CreateCounselReservationReq } from '../models';
// @ts-ignore
import type { DeleteCounselSessionReq } from '../models';
// @ts-ignore
import type { DeleteCounseleeBatchReq } from '../models';
// @ts-ignore
import type { DeleteCounselor400Response } from '../models';
// @ts-ignore
import type { DeleteMedicationCounselReq } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { ModifyCounselReservationReq } from '../models';
// @ts-ignore
import type { UpdateBaseInformationReq } from '../models';
// @ts-ignore
import type { UpdateCounselCardReq } from '../models';
// @ts-ignore
import type { UpdateCounselCardStatusReq } from '../models';
// @ts-ignore
import type { UpdateCounseleeConsentReq } from '../models';
// @ts-ignore
import type { UpdateCounseleeReq } from '../models';
// @ts-ignore
import type { UpdateCounselorInCounselSessionReq } from '../models';
// @ts-ignore
import type { UpdateHealthInformationReq } from '../models';
// @ts-ignore
import type { UpdateIndependentLifeInformationReq } from '../models';
// @ts-ignore
import type { UpdateLivingInformationReq } from '../models';
// @ts-ignore
import type { UpdateMedicationCounselReq } from '../models';
// @ts-ignore
import type { UpdateStatusInCounselSessionReq } from '../models';
// @ts-ignore
import type { WasteMedicationDisposalReq } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 처방 의약품 추가
         * @param {string} counselSessionId 
         * @param {Array<AddAndUpdateMedicationRecordHistReq>} addAndUpdateMedicationRecordHistReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAndUpdateMedicationRecordHist: async (counselSessionId: string, addAndUpdateMedicationRecordHistReq: Array<AddAndUpdateMedicationRecordHistReq>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('addAndUpdateMedicationRecordHist', 'counselSessionId', counselSessionId)
            // verify required parameter 'addAndUpdateMedicationRecordHistReq' is not null or undefined
            assertParamExists('addAndUpdateMedicationRecordHist', 'addAndUpdateMedicationRecordHistReq', addAndUpdateMedicationRecordHistReq)
            const localVarPath = `/v1/counsel/medication/record/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addAndUpdateMedicationRecordHistReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐의약품 추가 및 업데이트
         * @param {string} counselSessionId 
         * @param {Array<AddAndUpdateWasteMedicationRecordReq>} addAndUpdateWasteMedicationRecordReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAndUpdateWasteMedicationRecord: async (counselSessionId: string, addAndUpdateWasteMedicationRecordReq: Array<AddAndUpdateWasteMedicationRecordReq>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('addAndUpdateWasteMedicationRecord', 'counselSessionId', counselSessionId)
            // verify required parameter 'addAndUpdateWasteMedicationRecordReq' is not null or undefined
            assertParamExists('addAndUpdateWasteMedicationRecord', 'addAndUpdateWasteMedicationRecordReq', addAndUpdateWasteMedicationRecordReq)
            const localVarPath = `/v1/counsel/medication/waste/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addAndUpdateWasteMedicationRecordReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 기본 정보 생성
         * @param {AddCounseleeReq} addCounseleeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCounselee: async (addCounseleeReq: AddCounseleeReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addCounseleeReq' is not null or undefined
            assertParamExists('addCounselee', 'addCounseleeReq', addCounseleeReq)
            const localVarPath = `/v1/counsel/counselee/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addCounseleeReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 등록
         * @param {AddCounseleeConsentReq} addCounseleeConsentReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCounseleeConsent: async (addCounseleeConsentReq: AddCounseleeConsentReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addCounseleeConsentReq' is not null or undefined
            assertParamExists('addCounseleeConsent', 'addCounseleeConsentReq', addCounseleeConsentReq)
            const localVarPath = `/v1/counselee/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addCounseleeConsentReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 복약 상담 추가
         * @param {AddMedicationCounselReq} addMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMedicationCounsel: async (addMedicationCounselReq: AddMedicationCounselReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addMedicationCounselReq' is not null or undefined
            assertParamExists('addMedicationCounsel', 'addMedicationCounselReq', addMedicationCounselReq)
            const localVarPath = `/v1/counsel/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addMedicationCounselReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 추가 혹은 업데이트
         * @param {string} counselSessionId 
         * @param {WasteMedicationDisposalReq} wasteMedicationDisposalReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWasteMedicationDisposal: async (counselSessionId: string, wasteMedicationDisposalReq: WasteMedicationDisposalReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('addWasteMedicationDisposal', 'counselSessionId', counselSessionId)
            // verify required parameter 'wasteMedicationDisposalReq' is not null or undefined
            assertParamExists('addWasteMedicationDisposal', 'wasteMedicationDisposalReq', wasteMedicationDisposalReq)
            const localVarPath = `/v1/counsel/medication/waste/disposal/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(wasteMedicationDisposalReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 이름 자동완성
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteCounselees: async (keyword: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('autocompleteCounselees', 'keyword', keyword)
            const localVarPath = `/v1/counsel/counselee/autocomplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담세션(일정) 추가
         * @param {CreateCounselReservationReq} createCounselReservationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCounselReservation: async (createCounselReservationReq: CreateCounselReservationReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCounselReservationReq' is not null or undefined
            assertParamExists('createCounselReservation', 'createCounselReservationReq', createCounselReservationReq)
            const localVarPath = `/v1/counsel/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCounselReservationReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담일정 삭제
         * @param {DeleteCounselSessionReq} deleteCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselSession: async (deleteCounselSessionReq: DeleteCounselSessionReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteCounselSessionReq' is not null or undefined
            assertParamExists('deleteCounselSession', 'deleteCounselSessionReq', deleteCounselSessionReq)
            const localVarPath = `/v1/counsel/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCounselSessionReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 삭제
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselee: async (counseleeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counseleeId' is not null or undefined
            assertParamExists('deleteCounselee', 'counseleeId', counseleeId)
            const localVarPath = `/v1/counsel/counselee/{counseleeId}`
                .replace(`{${"counseleeId"}}`, encodeURIComponent(String(counseleeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 삭제(batch)
         * @param {Array<DeleteCounseleeBatchReq>} deleteCounseleeBatchReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounseleeBatch: async (deleteCounseleeBatchReq: Array<DeleteCounseleeBatchReq>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteCounseleeBatchReq' is not null or undefined
            assertParamExists('deleteCounseleeBatch', 'deleteCounseleeBatchReq', deleteCounseleeBatchReq)
            const localVarPath = `/v1/counsel/counselee/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCounseleeBatchReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 삭제
         * @param {string} counseleeConsentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounseleeConsent: async (counseleeConsentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counseleeConsentId' is not null or undefined
            assertParamExists('deleteCounseleeConsent', 'counseleeConsentId', counseleeConsentId)
            const localVarPath = `/v1/counselee/consent/{counseleeConsentId}`
                .replace(`{${"counseleeConsentId"}}`, encodeURIComponent(String(counseleeConsentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 복약 상담 삭제
         * @param {DeleteMedicationCounselReq} deleteMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedicationCounsel: async (deleteMedicationCounselReq: DeleteMedicationCounselReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteMedicationCounselReq' is not null or undefined
            assertParamExists('deleteMedicationCounsel', 'deleteMedicationCounselReq', deleteMedicationCounselReq)
            const localVarPath = `/v1/counsel/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteMedicationCounselReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 처방 의약품 삭제
         * @param {string} counselSessionId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedicationRecordHist: async (counselSessionId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('deleteMedicationRecordHist', 'counselSessionId', counselSessionId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMedicationRecordHist', 'id', id)
            const localVarPath = `/v1/counsel/medication/record/{counselSessionId}/{id}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 처방 의약품 일괄 삭제
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedicationRecordHistsByCounselSessionId: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('deleteMedicationRecordHistsByCounselSessionId', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/medication/record/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 삭제
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWasteMedicationDisposal: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('deleteWasteMedicationDisposal', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/medication/waste/disposal/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐의약품 삭제
         * @param {string} counselSessionId 
         * @param {string} wasteMedicationRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWasteMedicationRecord: async (counselSessionId: string, wasteMedicationRecordId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('deleteWasteMedicationRecord', 'counselSessionId', counselSessionId)
            // verify required parameter 'wasteMedicationRecordId' is not null or undefined
            assertParamExists('deleteWasteMedicationRecord', 'wasteMedicationRecordId', wasteMedicationRecordId)
            const localVarPath = `/v1/counsel/medication/waste/{counselSessionId}/{wasteMedicationRecordId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)))
                .replace(`{${"wasteMedicationRecordId"}}`, encodeURIComponent(String(wasteMedicationRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연계 기관 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliatedWelfareInstitutions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/counsel/counselee/affiliated-welfare-institutions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 등록된 생년월일 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBirthDates: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/counsel/counselee/birth-dates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWasteMedicationDisposal: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('getWasteMedicationDisposal', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/medication/waste/disposal/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담일정 수정
         * @param {ModifyCounselReservationReq} modifyCounselReservationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCounselReservation: async (modifyCounselReservationReq: ModifyCounselReservationReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modifyCounselReservationReq' is not null or undefined
            assertParamExists('modifyCounselReservation', 'modifyCounselReservationReq', modifyCounselReservationReq)
            const localVarPath = `/v1/counsel/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyCounselReservationReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담일정 검색 및 필터링
         * @param {number} page 
         * @param {number} size 
         * @param {string} [counseleeNameKeyword] 
         * @param {Array<string>} [counselorNames] 
         * @param {Array<string>} [scheduledDates] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCounselSessions: async (page: number, size: number, counseleeNameKeyword?: string, counselorNames?: Array<string>, scheduledDates?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('searchCounselSessions', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('searchCounselSessions', 'size', size)
            const localVarPath = `/v1/counsel/session/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (counseleeNameKeyword !== undefined) {
                localVarQueryParameter['counseleeNameKeyword'] = counseleeNameKeyword;
            }

            if (counselorNames) {
                localVarQueryParameter['counselorNames'] = counselorNames;
            }

            if (scheduledDates) {
                localVarQueryParameter['scheduledDates'] = scheduledDates;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 약 검색
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMedicationByKeyword: async (keyword: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('searchMedicationByKeyword', 'keyword', keyword)
            const localVarPath = `/v1/medication`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        selectCounselCard: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCard', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardBaseInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCardBaseInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/base-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardBaseInformation_1: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCardBaseInformation_1', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/base-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 건강 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardHealthInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCardHealthInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/health-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 건강 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardHealthInformation_2: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCardHealthInformation_2', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/health-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 자립생활 역량 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardIndependentLifeInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCardIndependentLifeInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/independent-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 자립생활 역량 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardIndependentLifeInformation_3: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCardIndependentLifeInformation_3', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/independent-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 생활 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardLivingInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCardLivingInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/living-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 생활 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardLivingInformation_4: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCardLivingInformation_4', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/living-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        selectCounselCard_5: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselCard_5', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/card/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담일정 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselSession: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounselSession', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/session/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담일정 목록 조회
         * @param {string} [baseDate] 
         * @param {string} [cursor] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselSessionListByBaseDateAndCursorAndSize: async (baseDate?: string, cursor?: string, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/counsel/session/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (baseDate !== undefined) {
                localVarQueryParameter['baseDate'] = (baseDate as any instanceof Date) ?
                    (baseDate as any).toISOString().substring(0,10) :
                    baseDate;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 상세 정보 조회
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselee: async (counseleeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counseleeId' is not null or undefined
            assertParamExists('selectCounselee', 'counseleeId', counseleeId)
            const localVarPath = `/v1/counsel/counselee/{counseleeId}`
                .replace(`{${"counseleeId"}}`, encodeURIComponent(String(counseleeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounseleeBaseInformation: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounseleeBaseInformation', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/counselee/{counselSessionId}/base/information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounseleeBaseInformation_6: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounseleeBaseInformation_6', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/counselee/{counselSessionId}/base/information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 조회
         * @param {string} counselSessionId 
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounseleeConsentByCounseleeId: async (counselSessionId: string, counseleeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectCounseleeConsentByCounseleeId', 'counselSessionId', counselSessionId)
            // verify required parameter 'counseleeId' is not null or undefined
            assertParamExists('selectCounseleeConsentByCounseleeId', 'counseleeId', counseleeId)
            const localVarPath = `/v1/counselee/consent/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (counseleeId !== undefined) {
                localVarQueryParameter['counseleeId'] = counseleeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 목록 조회
         * @param {number} page 
         * @param {number} size 
         * @param {string} [name] 
         * @param {Array<string>} [birthDates] 
         * @param {Array<string>} [affiliatedWelfareInstitutions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselees: async (page: number, size: number, name?: string, birthDates?: Array<string>, affiliatedWelfareInstitutions?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('selectCounselees', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('selectCounselees', 'size', size)
            const localVarPath = `/v1/counsel/counselee/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (birthDates) {
                localVarQueryParameter['birthDates'] = birthDates;
            }

            if (affiliatedWelfareInstitutions) {
                localVarQueryParameter['affiliatedWelfareInstitutions'] = affiliatedWelfareInstitutions;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 복약 상담 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMedicationCounsel: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectMedicationCounsel', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (counselSessionId !== undefined) {
                localVarQueryParameter['counselSessionId'] = counselSessionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐의약품 리스트 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMedicationRecordListBySessionId: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectMedicationRecordListBySessionId', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/medication/waste/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 처방 의약품 리스트 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMedicationRecordListBySessionId1: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectMedicationRecordListBySessionId1', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/medication/record/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 이전 상담 내역 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPreviousCounselSessionList: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectPreviousCounselSessionList', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/session/{counselSessionId}/previous/list`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 이전 상담 카드 item 목록 조회
         * @param {string} counselSessionId 
         * @param {SelectPreviousItemListByInformationNameAndItemNameTypeEnum} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPreviousItemListByInformationNameAndItemName: async (counselSessionId: string, type: SelectPreviousItemListByInformationNameAndItemNameTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectPreviousItemListByInformationNameAndItemName', 'counselSessionId', counselSessionId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('selectPreviousItemListByInformationNameAndItemName', 'type', type)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/previous/item/list`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 이전 복약 상담 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPreviousMedicationCounsel: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectPreviousMedicationCounsel', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/record/{counselSessionId}/previous/summary`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 수정
         * @param {string} counselSessionId 
         * @param {UpdateCounselCardReq} updateCounselCardReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselCard: async (counselSessionId: string, updateCounselCardReq: UpdateCounselCardReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('updateCounselCard', 'counselSessionId', counselSessionId)
            // verify required parameter 'updateCounselCardReq' is not null or undefined
            assertParamExists('updateCounselCard', 'updateCounselCardReq', updateCounselCardReq)
            const localVarPath = `/v1/counsel/card/{counselSessionId}`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCounselCardReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 기본 정보 수정
         * @param {string} counselSessionId 
         * @param {UpdateBaseInformationReq} updateBaseInformationReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCounselCardBaseInformation: async (counselSessionId: string, updateBaseInformationReq: UpdateBaseInformationReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('updateCounselCardBaseInformation', 'counselSessionId', counselSessionId)
            // verify required parameter 'updateBaseInformationReq' is not null or undefined
            assertParamExists('updateCounselCardBaseInformation', 'updateBaseInformationReq', updateBaseInformationReq)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/base-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBaseInformationReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 건강 정보 수정
         * @param {string} counselSessionId 
         * @param {UpdateHealthInformationReq} updateHealthInformationReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCounselCardHealthInformation: async (counselSessionId: string, updateHealthInformationReq: UpdateHealthInformationReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('updateCounselCardHealthInformation', 'counselSessionId', counselSessionId)
            // verify required parameter 'updateHealthInformationReq' is not null or undefined
            assertParamExists('updateCounselCardHealthInformation', 'updateHealthInformationReq', updateHealthInformationReq)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/health-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateHealthInformationReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 자립생활 역량 수정
         * @param {string} counselSessionId 
         * @param {UpdateIndependentLifeInformationReq} updateIndependentLifeInformationReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCounselCardIndependentLifeInformation: async (counselSessionId: string, updateIndependentLifeInformationReq: UpdateIndependentLifeInformationReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('updateCounselCardIndependentLifeInformation', 'counselSessionId', counselSessionId)
            // verify required parameter 'updateIndependentLifeInformationReq' is not null or undefined
            assertParamExists('updateCounselCardIndependentLifeInformation', 'updateIndependentLifeInformationReq', updateIndependentLifeInformationReq)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/independent-life-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateIndependentLifeInformationReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 생활 정보 수정
         * @param {string} counselSessionId 
         * @param {UpdateLivingInformationReq} updateLivingInformationReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCounselCardLivingInformation: async (counselSessionId: string, updateLivingInformationReq: UpdateLivingInformationReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('updateCounselCardLivingInformation', 'counselSessionId', counselSessionId)
            // verify required parameter 'updateLivingInformationReq' is not null or undefined
            assertParamExists('updateCounselCardLivingInformation', 'updateLivingInformationReq', updateLivingInformationReq)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/living-information`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateLivingInformationReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 카드 상태 수정
         * @param {string} counselSessionId 
         * @param {UpdateCounselCardStatusReq} updateCounselCardStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselCardStatus: async (counselSessionId: string, updateCounselCardStatusReq: UpdateCounselCardStatusReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('updateCounselCardStatus', 'counselSessionId', counselSessionId)
            // verify required parameter 'updateCounselCardStatusReq' is not null or undefined
            assertParamExists('updateCounselCardStatus', 'updateCounselCardStatusReq', updateCounselCardStatusReq)
            const localVarPath = `/v1/counsel/card/{counselSessionId}/status`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCounselCardStatusReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상담 일정 상태 변경
         * @param {UpdateStatusInCounselSessionReq} updateStatusInCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselSessionStatus: async (updateStatusInCounselSessionReq: UpdateStatusInCounselSessionReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateStatusInCounselSessionReq' is not null or undefined
            assertParamExists('updateCounselSessionStatus', 'updateStatusInCounselSessionReq', updateStatusInCounselSessionReq)
            const localVarPath = `/v1/counsel/session/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStatusInCounselSessionReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 기본 정보 수정
         * @param {UpdateCounseleeReq} updateCounseleeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselee: async (updateCounseleeReq: UpdateCounseleeReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCounseleeReq' is not null or undefined
            assertParamExists('updateCounselee', 'updateCounseleeReq', updateCounseleeReq)
            const localVarPath = `/v1/counsel/counselee/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCounseleeReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 수정
         * @param {UpdateCounseleeConsentReq} updateCounseleeConsentReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounseleeConsent: async (updateCounseleeConsentReq: UpdateCounseleeConsentReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCounseleeConsentReq' is not null or undefined
            assertParamExists('updateCounseleeConsent', 'updateCounseleeConsentReq', updateCounseleeConsentReq)
            const localVarPath = `/v1/counselee/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCounseleeConsentReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * req body에 counselorId 넣지 않은 경우 로그인 계정 정보로 할당됨.
         * @summary 상담일정 담당 약사 수정
         * @param {UpdateCounselorInCounselSessionReq} updateCounselorInCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselorInCounselSession: async (updateCounselorInCounselSessionReq: UpdateCounselorInCounselSessionReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCounselorInCounselSessionReq' is not null or undefined
            assertParamExists('updateCounselorInCounselSession', 'updateCounselorInCounselSessionReq', updateCounselorInCounselSessionReq)
            const localVarPath = `/v1/counsel/session/counselor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCounselorInCounselSessionReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 복약 상담 수정
         * @param {UpdateMedicationCounselReq} updateMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMedicationCounsel: async (updateMedicationCounselReq: UpdateMedicationCounselReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateMedicationCounselReq' is not null or undefined
            assertParamExists('updateMedicationCounsel', 'updateMedicationCounselReq', updateMedicationCounselReq)
            const localVarPath = `/v1/counsel/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMedicationCounselReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 처방 의약품 추가
         * @param {string} counselSessionId 
         * @param {Array<AddAndUpdateMedicationRecordHistReq>} addAndUpdateMedicationRecordHistReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAndUpdateMedicationRecordHist(counselSessionId: string, addAndUpdateMedicationRecordHistReq: Array<AddAndUpdateMedicationRecordHistReq>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListAddAndUpdateMedicationRecordHistRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAndUpdateMedicationRecordHist(counselSessionId, addAndUpdateMedicationRecordHistReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addAndUpdateMedicationRecordHist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 폐의약품 추가 및 업데이트
         * @param {string} counselSessionId 
         * @param {Array<AddAndUpdateWasteMedicationRecordReq>} addAndUpdateWasteMedicationRecordReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAndUpdateWasteMedicationRecord(counselSessionId: string, addAndUpdateWasteMedicationRecordReq: Array<AddAndUpdateWasteMedicationRecordReq>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListAddAndUpdateWasteMedicationRecordRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAndUpdateWasteMedicationRecord(counselSessionId, addAndUpdateWasteMedicationRecordReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addAndUpdateWasteMedicationRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 기본 정보 생성
         * @param {AddCounseleeReq} addCounseleeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCounselee(addCounseleeReq: AddCounseleeReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCounselee(addCounseleeReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addCounselee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 등록
         * @param {AddCounseleeConsentReq} addCounseleeConsentReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCounseleeConsent(addCounseleeConsentReq: AddCounseleeConsentReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResAddCounseleeConsentRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCounseleeConsent(addCounseleeConsentReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addCounseleeConsent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 복약 상담 추가
         * @param {AddMedicationCounselReq} addMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMedicationCounsel(addMedicationCounselReq: AddMedicationCounselReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResAddMedicationCounselRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMedicationCounsel(addMedicationCounselReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addMedicationCounsel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 추가 혹은 업데이트
         * @param {string} counselSessionId 
         * @param {WasteMedicationDisposalReq} wasteMedicationDisposalReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addWasteMedicationDisposal(counselSessionId: string, wasteMedicationDisposalReq: WasteMedicationDisposalReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addWasteMedicationDisposal(counselSessionId, wasteMedicationDisposalReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addWasteMedicationDisposal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 이름 자동완성
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteCounselees(keyword: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListSelectCounseleeAutocompleteRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autocompleteCounselees(keyword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.autocompleteCounselees']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담세션(일정) 추가
         * @param {CreateCounselReservationReq} createCounselReservationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCounselReservation(createCounselReservationReq: CreateCounselReservationReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCreateCounselReservationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCounselReservation(createCounselReservationReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCounselReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담일정 삭제
         * @param {DeleteCounselSessionReq} deleteCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCounselSession(deleteCounselSessionReq: DeleteCounselSessionReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResDeleteCounselSessionRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCounselSession(deleteCounselSessionReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteCounselSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 삭제
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCounselee(counseleeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCounselee(counseleeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteCounselee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 삭제(batch)
         * @param {Array<DeleteCounseleeBatchReq>} deleteCounseleeBatchReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCounseleeBatch(deleteCounseleeBatchReq: Array<DeleteCounseleeBatchReq>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListDeleteCounseleeBatchRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCounseleeBatch(deleteCounseleeBatchReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteCounseleeBatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 삭제
         * @param {string} counseleeConsentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCounseleeConsent(counseleeConsentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResDeleteCounseleeConsentRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCounseleeConsent(counseleeConsentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteCounseleeConsent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 복약 상담 삭제
         * @param {DeleteMedicationCounselReq} deleteMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMedicationCounsel(deleteMedicationCounselReq: DeleteMedicationCounselReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResDeleteMedicationCounselRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMedicationCounsel(deleteMedicationCounselReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMedicationCounsel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 처방 의약품 삭제
         * @param {string} counselSessionId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMedicationRecordHist(counselSessionId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMedicationRecordHist(counselSessionId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMedicationRecordHist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 처방 의약품 일괄 삭제
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMedicationRecordHistsByCounselSessionId(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMedicationRecordHistsByCounselSessionId(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMedicationRecordHistsByCounselSessionId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 삭제
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWasteMedicationDisposal(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWasteMedicationDisposal(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteWasteMedicationDisposal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 폐의약품 삭제
         * @param {string} counselSessionId 
         * @param {string} wasteMedicationRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWasteMedicationRecord(counselSessionId: string, wasteMedicationRecordId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWasteMedicationRecord(counselSessionId, wasteMedicationRecordId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteWasteMedicationRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 연계 기관 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAffiliatedWelfareInstitutions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAffiliatedWelfareInstitutions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAffiliatedWelfareInstitutions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 등록된 생년월일 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBirthDates(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListLocalDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBirthDates(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBirthDates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWasteMedicationDisposal(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResWasteMedicationDisposalRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWasteMedicationDisposal(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWasteMedicationDisposal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담일정 수정
         * @param {ModifyCounselReservationReq} modifyCounselReservationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyCounselReservation(modifyCounselReservationReq: ModifyCounselReservationReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResModifyCounselReservationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyCounselReservation(modifyCounselReservationReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyCounselReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담일정 검색 및 필터링
         * @param {number} page 
         * @param {number} size 
         * @param {string} [counseleeNameKeyword] 
         * @param {Array<string>} [counselorNames] 
         * @param {Array<string>} [scheduledDates] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCounselSessions(page: number, size: number, counseleeNameKeyword?: string, counselorNames?: Array<string>, scheduledDates?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectCounselSessionPageRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCounselSessions(page, size, counseleeNameKeyword, counselorNames, scheduledDates, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.searchCounselSessions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 약 검색
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMedicationByKeyword(keyword: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListSearchMedicationByKeywordRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMedicationByKeyword(keyword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.searchMedicationByKeyword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async selectCounselCard(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCard(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselCardBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardBaseInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCardBaseInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselCardBaseInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselCardBaseInformation_1(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardBaseInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCardBaseInformation_1(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselCardBaseInformation_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 건강 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselCardHealthInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardHealthInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCardHealthInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselCardHealthInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 건강 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselCardHealthInformation_2(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardHealthInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCardHealthInformation_2(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselCardHealthInformation_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 자립생활 역량 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselCardIndependentLifeInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardIndependentLifeInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCardIndependentLifeInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselCardIndependentLifeInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 자립생활 역량 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselCardIndependentLifeInformation_3(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardIndependentLifeInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCardIndependentLifeInformation_3(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselCardIndependentLifeInformation_3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 생활 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselCardLivingInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardLivingInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCardLivingInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselCardLivingInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 생활 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselCardLivingInformation_4(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardLivingInformationRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCardLivingInformation_4(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselCardLivingInformation_4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async selectCounselCard_5(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselCard_5(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselCard_5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담일정 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselSession(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectCounselSessionRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselSession(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담일정 목록 조회
         * @param {string} [baseDate] 
         * @param {string} [cursor] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselSessionListByBaseDateAndCursorAndSize(baseDate?: string, cursor?: string, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonCursorResListSelectCounselSessionListItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselSessionListByBaseDateAndCursorAndSize(baseDate, cursor, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselSessionListByBaseDateAndCursorAndSize']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 상세 정보 조회
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselee(counseleeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectCounseleeRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselee(counseleeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounseleeBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectCounseleeBaseInformationByCounseleeIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounseleeBaseInformation(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounseleeBaseInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounseleeBaseInformation_6(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectCounseleeBaseInformationByCounseleeIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounseleeBaseInformation_6(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounseleeBaseInformation_6']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 조회
         * @param {string} counselSessionId 
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounseleeConsentByCounseleeId(counselSessionId: string, counseleeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectCounseleeConsentByCounseleeIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounseleeConsentByCounseleeId(counselSessionId, counseleeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounseleeConsentByCounseleeId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 목록 조회
         * @param {number} page 
         * @param {number} size 
         * @param {string} [name] 
         * @param {Array<string>} [birthDates] 
         * @param {Array<string>} [affiliatedWelfareInstitutions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCounselees(page: number, size: number, name?: string, birthDates?: Array<string>, affiliatedWelfareInstitutions?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectCounseleePageRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCounselees(page, size, name, birthDates, affiliatedWelfareInstitutions, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectCounselees']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 복약 상담 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectMedicationCounsel(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectMedicationCounselRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectMedicationCounsel(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectMedicationCounsel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 폐의약품 리스트 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectMedicationRecordListBySessionId(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListSelectMedicationRecordListBySessionIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectMedicationRecordListBySessionId(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectMedicationRecordListBySessionId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 처방 의약품 리스트 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectMedicationRecordListBySessionId1(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListSelectMedicationRecordHistRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectMedicationRecordListBySessionId1(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectMedicationRecordListBySessionId1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 이전 상담 내역 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectPreviousCounselSessionList(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListSelectPreviousCounselSessionListRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectPreviousCounselSessionList(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectPreviousCounselSessionList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 이전 상담 카드 item 목록 조회
         * @param {string} counselSessionId 
         * @param {SelectPreviousItemListByInformationNameAndItemNameTypeEnum} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectPreviousItemListByInformationNameAndItemName(counselSessionId: string, type: SelectPreviousItemListByInformationNameAndItemNameTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResListTimeRecordedResObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectPreviousItemListByInformationNameAndItemName(counselSessionId, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectPreviousItemListByInformationNameAndItemName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 이전 복약 상담 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectPreviousMedicationCounsel(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectPreviousMedicationCounselRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectPreviousMedicationCounsel(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.selectPreviousMedicationCounsel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 수정
         * @param {string} counselSessionId 
         * @param {UpdateCounselCardReq} updateCounselCardReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounselCard(counselSessionId: string, updateCounselCardReq: UpdateCounselCardReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselCard(counselSessionId, updateCounselCardReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateCounselCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 기본 정보 수정
         * @param {string} counselSessionId 
         * @param {UpdateBaseInformationReq} updateBaseInformationReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async updateCounselCardBaseInformation(counselSessionId: string, updateBaseInformationReq: UpdateBaseInformationReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselCardBaseInformation(counselSessionId, updateBaseInformationReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateCounselCardBaseInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 건강 정보 수정
         * @param {string} counselSessionId 
         * @param {UpdateHealthInformationReq} updateHealthInformationReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async updateCounselCardHealthInformation(counselSessionId: string, updateHealthInformationReq: UpdateHealthInformationReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselCardHealthInformation(counselSessionId, updateHealthInformationReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateCounselCardHealthInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 자립생활 역량 수정
         * @param {string} counselSessionId 
         * @param {UpdateIndependentLifeInformationReq} updateIndependentLifeInformationReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async updateCounselCardIndependentLifeInformation(counselSessionId: string, updateIndependentLifeInformationReq: UpdateIndependentLifeInformationReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselCardIndependentLifeInformation(counselSessionId, updateIndependentLifeInformationReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateCounselCardIndependentLifeInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 생활 정보 수정
         * @param {string} counselSessionId 
         * @param {UpdateLivingInformationReq} updateLivingInformationReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async updateCounselCardLivingInformation(counselSessionId: string, updateLivingInformationReq: UpdateLivingInformationReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselCardLivingInformation(counselSessionId, updateLivingInformationReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateCounselCardLivingInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 카드 상태 수정
         * @param {string} counselSessionId 
         * @param {UpdateCounselCardStatusReq} updateCounselCardStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounselCardStatus(counselSessionId: string, updateCounselCardStatusReq: UpdateCounselCardStatusReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResCounselCardIdRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselCardStatus(counselSessionId, updateCounselCardStatusReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateCounselCardStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상담 일정 상태 변경
         * @param {UpdateStatusInCounselSessionReq} updateStatusInCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounselSessionStatus(updateStatusInCounselSessionReq: UpdateStatusInCounselSessionReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResUpdateStatusInCounselSessionRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselSessionStatus(updateStatusInCounselSessionReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateCounselSessionStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 기본 정보 수정
         * @param {UpdateCounseleeReq} updateCounseleeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounselee(updateCounseleeReq: UpdateCounseleeReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselee(updateCounseleeReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateCounselee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 수정
         * @param {UpdateCounseleeConsentReq} updateCounseleeConsentReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounseleeConsent(updateCounseleeConsentReq: UpdateCounseleeConsentReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResUpdateCounseleeConsentRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounseleeConsent(updateCounseleeConsentReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateCounseleeConsent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * req body에 counselorId 넣지 않은 경우 로그인 계정 정보로 할당됨.
         * @summary 상담일정 담당 약사 수정
         * @param {UpdateCounselorInCounselSessionReq} updateCounselorInCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounselorInCounselSession(updateCounselorInCounselSessionReq: UpdateCounselorInCounselSessionReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResUpdateCounselorInCounselSessionRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounselorInCounselSession(updateCounselorInCounselSessionReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateCounselorInCounselSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 복약 상담 수정
         * @param {UpdateMedicationCounselReq} updateMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMedicationCounsel(updateMedicationCounselReq: UpdateMedicationCounselReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResUpdateMedicationCounselRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMedicationCounsel(updateMedicationCounselReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateMedicationCounsel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 처방 의약품 추가
         * @param {string} counselSessionId 
         * @param {Array<AddAndUpdateMedicationRecordHistReq>} addAndUpdateMedicationRecordHistReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAndUpdateMedicationRecordHist(counselSessionId: string, addAndUpdateMedicationRecordHistReq: Array<AddAndUpdateMedicationRecordHistReq>, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListAddAndUpdateMedicationRecordHistRes> {
            return localVarFp.addAndUpdateMedicationRecordHist(counselSessionId, addAndUpdateMedicationRecordHistReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐의약품 추가 및 업데이트
         * @param {string} counselSessionId 
         * @param {Array<AddAndUpdateWasteMedicationRecordReq>} addAndUpdateWasteMedicationRecordReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAndUpdateWasteMedicationRecord(counselSessionId: string, addAndUpdateWasteMedicationRecordReq: Array<AddAndUpdateWasteMedicationRecordReq>, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListAddAndUpdateWasteMedicationRecordRes> {
            return localVarFp.addAndUpdateWasteMedicationRecord(counselSessionId, addAndUpdateWasteMedicationRecordReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 기본 정보 생성
         * @param {AddCounseleeReq} addCounseleeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCounselee(addCounseleeReq: AddCounseleeReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResString> {
            return localVarFp.addCounselee(addCounseleeReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 등록
         * @param {AddCounseleeConsentReq} addCounseleeConsentReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCounseleeConsent(addCounseleeConsentReq: AddCounseleeConsentReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResAddCounseleeConsentRes> {
            return localVarFp.addCounseleeConsent(addCounseleeConsentReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 복약 상담 추가
         * @param {AddMedicationCounselReq} addMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMedicationCounsel(addMedicationCounselReq: AddMedicationCounselReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResAddMedicationCounselRes> {
            return localVarFp.addMedicationCounsel(addMedicationCounselReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 추가 혹은 업데이트
         * @param {string} counselSessionId 
         * @param {WasteMedicationDisposalReq} wasteMedicationDisposalReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWasteMedicationDisposal(counselSessionId: string, wasteMedicationDisposalReq: WasteMedicationDisposalReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResString> {
            return localVarFp.addWasteMedicationDisposal(counselSessionId, wasteMedicationDisposalReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 이름 자동완성
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteCounselees(keyword: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListSelectCounseleeAutocompleteRes> {
            return localVarFp.autocompleteCounselees(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담세션(일정) 추가
         * @param {CreateCounselReservationReq} createCounselReservationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCounselReservation(createCounselReservationReq: CreateCounselReservationReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCreateCounselReservationRes> {
            return localVarFp.createCounselReservation(createCounselReservationReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담일정 삭제
         * @param {DeleteCounselSessionReq} deleteCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselSession(deleteCounselSessionReq: DeleteCounselSessionReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResDeleteCounselSessionRes> {
            return localVarFp.deleteCounselSession(deleteCounselSessionReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 삭제
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounselee(counseleeId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResString> {
            return localVarFp.deleteCounselee(counseleeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 삭제(batch)
         * @param {Array<DeleteCounseleeBatchReq>} deleteCounseleeBatchReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounseleeBatch(deleteCounseleeBatchReq: Array<DeleteCounseleeBatchReq>, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListDeleteCounseleeBatchRes> {
            return localVarFp.deleteCounseleeBatch(deleteCounseleeBatchReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 삭제
         * @param {string} counseleeConsentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCounseleeConsent(counseleeConsentId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResDeleteCounseleeConsentRes> {
            return localVarFp.deleteCounseleeConsent(counseleeConsentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 복약 상담 삭제
         * @param {DeleteMedicationCounselReq} deleteMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedicationCounsel(deleteMedicationCounselReq: DeleteMedicationCounselReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResDeleteMedicationCounselRes> {
            return localVarFp.deleteMedicationCounsel(deleteMedicationCounselReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 처방 의약품 삭제
         * @param {string} counselSessionId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedicationRecordHist(counselSessionId: string, id: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResVoid> {
            return localVarFp.deleteMedicationRecordHist(counselSessionId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 처방 의약품 일괄 삭제
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedicationRecordHistsByCounselSessionId(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResVoid> {
            return localVarFp.deleteMedicationRecordHistsByCounselSessionId(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 삭제
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWasteMedicationDisposal(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResVoid> {
            return localVarFp.deleteWasteMedicationDisposal(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐의약품 삭제
         * @param {string} counselSessionId 
         * @param {string} wasteMedicationRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWasteMedicationRecord(counselSessionId: string, wasteMedicationRecordId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResVoid> {
            return localVarFp.deleteWasteMedicationRecord(counselSessionId, wasteMedicationRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연계 기관 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliatedWelfareInstitutions(options?: RawAxiosRequestConfig): AxiosPromise<CommonResListString> {
            return localVarFp.getAffiliatedWelfareInstitutions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 등록된 생년월일 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBirthDates(options?: RawAxiosRequestConfig): AxiosPromise<CommonResListLocalDate> {
            return localVarFp.getBirthDates(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐의약품 폐기 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWasteMedicationDisposal(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResWasteMedicationDisposalRes> {
            return localVarFp.getWasteMedicationDisposal(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담일정 수정
         * @param {ModifyCounselReservationReq} modifyCounselReservationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCounselReservation(modifyCounselReservationReq: ModifyCounselReservationReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResModifyCounselReservationRes> {
            return localVarFp.modifyCounselReservation(modifyCounselReservationReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담일정 검색 및 필터링
         * @param {number} page 
         * @param {number} size 
         * @param {string} [counseleeNameKeyword] 
         * @param {Array<string>} [counselorNames] 
         * @param {Array<string>} [scheduledDates] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCounselSessions(page: number, size: number, counseleeNameKeyword?: string, counselorNames?: Array<string>, scheduledDates?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectCounselSessionPageRes> {
            return localVarFp.searchCounselSessions(page, size, counseleeNameKeyword, counselorNames, scheduledDates, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 약 검색
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMedicationByKeyword(keyword: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListSearchMedicationByKeywordRes> {
            return localVarFp.searchMedicationByKeyword(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        selectCounselCard(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardRes> {
            return localVarFp.selectCounselCard(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardBaseInformationRes> {
            return localVarFp.selectCounselCardBaseInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardBaseInformation_1(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardBaseInformationRes> {
            return localVarFp.selectCounselCardBaseInformation_1(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 건강 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardHealthInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardHealthInformationRes> {
            return localVarFp.selectCounselCardHealthInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 건강 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardHealthInformation_2(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardHealthInformationRes> {
            return localVarFp.selectCounselCardHealthInformation_2(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 자립생활 역량 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardIndependentLifeInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardIndependentLifeInformationRes> {
            return localVarFp.selectCounselCardIndependentLifeInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 자립생활 역량 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardIndependentLifeInformation_3(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardIndependentLifeInformationRes> {
            return localVarFp.selectCounselCardIndependentLifeInformation_3(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 생활 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardLivingInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardLivingInformationRes> {
            return localVarFp.selectCounselCardLivingInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 생활 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselCardLivingInformation_4(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardLivingInformationRes> {
            return localVarFp.selectCounselCardLivingInformation_4(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        selectCounselCard_5(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardRes> {
            return localVarFp.selectCounselCard_5(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담일정 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselSession(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectCounselSessionRes> {
            return localVarFp.selectCounselSession(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담일정 목록 조회
         * @param {string} [baseDate] 
         * @param {string} [cursor] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselSessionListByBaseDateAndCursorAndSize(baseDate?: string, cursor?: string, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<CommonCursorResListSelectCounselSessionListItem> {
            return localVarFp.selectCounselSessionListByBaseDateAndCursorAndSize(baseDate, cursor, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 상세 정보 조회
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselee(counseleeId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectCounseleeRes> {
            return localVarFp.selectCounselee(counseleeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounseleeBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectCounseleeBaseInformationByCounseleeIdRes> {
            return localVarFp.selectCounseleeBaseInformation(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 기본 정보 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounseleeBaseInformation_6(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectCounseleeBaseInformationByCounseleeIdRes> {
            return localVarFp.selectCounseleeBaseInformation_6(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 조회
         * @param {string} counselSessionId 
         * @param {string} counseleeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounseleeConsentByCounseleeId(counselSessionId: string, counseleeId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectCounseleeConsentByCounseleeIdRes> {
            return localVarFp.selectCounseleeConsentByCounseleeId(counselSessionId, counseleeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 목록 조회
         * @param {number} page 
         * @param {number} size 
         * @param {string} [name] 
         * @param {Array<string>} [birthDates] 
         * @param {Array<string>} [affiliatedWelfareInstitutions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCounselees(page: number, size: number, name?: string, birthDates?: Array<string>, affiliatedWelfareInstitutions?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectCounseleePageRes> {
            return localVarFp.selectCounselees(page, size, name, birthDates, affiliatedWelfareInstitutions, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 복약 상담 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMedicationCounsel(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectMedicationCounselRes> {
            return localVarFp.selectMedicationCounsel(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐의약품 리스트 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMedicationRecordListBySessionId(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListSelectMedicationRecordListBySessionIdRes> {
            return localVarFp.selectMedicationRecordListBySessionId(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 처방 의약품 리스트 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMedicationRecordListBySessionId1(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListSelectMedicationRecordHistRes> {
            return localVarFp.selectMedicationRecordListBySessionId1(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 이전 상담 내역 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPreviousCounselSessionList(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListSelectPreviousCounselSessionListRes> {
            return localVarFp.selectPreviousCounselSessionList(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 이전 상담 카드 item 목록 조회
         * @param {string} counselSessionId 
         * @param {SelectPreviousItemListByInformationNameAndItemNameTypeEnum} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPreviousItemListByInformationNameAndItemName(counselSessionId: string, type: SelectPreviousItemListByInformationNameAndItemNameTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<CommonResListTimeRecordedResObject> {
            return localVarFp.selectPreviousItemListByInformationNameAndItemName(counselSessionId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 이전 복약 상담 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPreviousMedicationCounsel(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectPreviousMedicationCounselRes> {
            return localVarFp.selectPreviousMedicationCounsel(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 수정
         * @param {string} counselSessionId 
         * @param {UpdateCounselCardReq} updateCounselCardReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselCard(counselSessionId: string, updateCounselCardReq: UpdateCounselCardReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardIdRes> {
            return localVarFp.updateCounselCard(counselSessionId, updateCounselCardReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 기본 정보 수정
         * @param {string} counselSessionId 
         * @param {UpdateBaseInformationReq} updateBaseInformationReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCounselCardBaseInformation(counselSessionId: string, updateBaseInformationReq: UpdateBaseInformationReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardIdRes> {
            return localVarFp.updateCounselCardBaseInformation(counselSessionId, updateBaseInformationReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 건강 정보 수정
         * @param {string} counselSessionId 
         * @param {UpdateHealthInformationReq} updateHealthInformationReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCounselCardHealthInformation(counselSessionId: string, updateHealthInformationReq: UpdateHealthInformationReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardIdRes> {
            return localVarFp.updateCounselCardHealthInformation(counselSessionId, updateHealthInformationReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 자립생활 역량 수정
         * @param {string} counselSessionId 
         * @param {UpdateIndependentLifeInformationReq} updateIndependentLifeInformationReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCounselCardIndependentLifeInformation(counselSessionId: string, updateIndependentLifeInformationReq: UpdateIndependentLifeInformationReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardIdRes> {
            return localVarFp.updateCounselCardIndependentLifeInformation(counselSessionId, updateIndependentLifeInformationReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 생활 정보 수정
         * @param {string} counselSessionId 
         * @param {UpdateLivingInformationReq} updateLivingInformationReq 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCounselCardLivingInformation(counselSessionId: string, updateLivingInformationReq: UpdateLivingInformationReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardIdRes> {
            return localVarFp.updateCounselCardLivingInformation(counselSessionId, updateLivingInformationReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 카드 상태 수정
         * @param {string} counselSessionId 
         * @param {UpdateCounselCardStatusReq} updateCounselCardStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselCardStatus(counselSessionId: string, updateCounselCardStatusReq: UpdateCounselCardStatusReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResCounselCardIdRes> {
            return localVarFp.updateCounselCardStatus(counselSessionId, updateCounselCardStatusReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상담 일정 상태 변경
         * @param {UpdateStatusInCounselSessionReq} updateStatusInCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselSessionStatus(updateStatusInCounselSessionReq: UpdateStatusInCounselSessionReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResUpdateStatusInCounselSessionRes> {
            return localVarFp.updateCounselSessionStatus(updateStatusInCounselSessionReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 기본 정보 수정
         * @param {UpdateCounseleeReq} updateCounseleeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselee(updateCounseleeReq: UpdateCounseleeReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResString> {
            return localVarFp.updateCounselee(updateCounseleeReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내담자 개인정보 수집 동의 여부 수정
         * @param {UpdateCounseleeConsentReq} updateCounseleeConsentReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounseleeConsent(updateCounseleeConsentReq: UpdateCounseleeConsentReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResUpdateCounseleeConsentRes> {
            return localVarFp.updateCounseleeConsent(updateCounseleeConsentReq, options).then((request) => request(axios, basePath));
        },
        /**
         * req body에 counselorId 넣지 않은 경우 로그인 계정 정보로 할당됨.
         * @summary 상담일정 담당 약사 수정
         * @param {UpdateCounselorInCounselSessionReq} updateCounselorInCounselSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounselorInCounselSession(updateCounselorInCounselSessionReq: UpdateCounselorInCounselSessionReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResUpdateCounselorInCounselSessionRes> {
            return localVarFp.updateCounselorInCounselSession(updateCounselorInCounselSessionReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 복약 상담 수정
         * @param {UpdateMedicationCounselReq} updateMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMedicationCounsel(updateMedicationCounselReq: UpdateMedicationCounselReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResUpdateMedicationCounselRes> {
            return localVarFp.updateMedicationCounsel(updateMedicationCounselReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 처방 의약품 추가
     * @param {string} counselSessionId 
     * @param {Array<AddAndUpdateMedicationRecordHistReq>} addAndUpdateMedicationRecordHistReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addAndUpdateMedicationRecordHist(counselSessionId: string, addAndUpdateMedicationRecordHistReq: Array<AddAndUpdateMedicationRecordHistReq>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addAndUpdateMedicationRecordHist(counselSessionId, addAndUpdateMedicationRecordHistReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐의약품 추가 및 업데이트
     * @param {string} counselSessionId 
     * @param {Array<AddAndUpdateWasteMedicationRecordReq>} addAndUpdateWasteMedicationRecordReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addAndUpdateWasteMedicationRecord(counselSessionId: string, addAndUpdateWasteMedicationRecordReq: Array<AddAndUpdateWasteMedicationRecordReq>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addAndUpdateWasteMedicationRecord(counselSessionId, addAndUpdateWasteMedicationRecordReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 기본 정보 생성
     * @param {AddCounseleeReq} addCounseleeReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addCounselee(addCounseleeReq: AddCounseleeReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addCounselee(addCounseleeReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 개인정보 수집 동의 여부 등록
     * @param {AddCounseleeConsentReq} addCounseleeConsentReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addCounseleeConsent(addCounseleeConsentReq: AddCounseleeConsentReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addCounseleeConsent(addCounseleeConsentReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 복약 상담 추가
     * @param {AddMedicationCounselReq} addMedicationCounselReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addMedicationCounsel(addMedicationCounselReq: AddMedicationCounselReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addMedicationCounsel(addMedicationCounselReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐의약품 폐기 정보 추가 혹은 업데이트
     * @param {string} counselSessionId 
     * @param {WasteMedicationDisposalReq} wasteMedicationDisposalReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addWasteMedicationDisposal(counselSessionId: string, wasteMedicationDisposalReq: WasteMedicationDisposalReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addWasteMedicationDisposal(counselSessionId, wasteMedicationDisposalReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 이름 자동완성
     * @param {string} keyword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public autocompleteCounselees(keyword: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).autocompleteCounselees(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담세션(일정) 추가
     * @param {CreateCounselReservationReq} createCounselReservationReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCounselReservation(createCounselReservationReq: CreateCounselReservationReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCounselReservation(createCounselReservationReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담일정 삭제
     * @param {DeleteCounselSessionReq} deleteCounselSessionReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCounselSession(deleteCounselSessionReq: DeleteCounselSessionReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCounselSession(deleteCounselSessionReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 삭제
     * @param {string} counseleeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCounselee(counseleeId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCounselee(counseleeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 삭제(batch)
     * @param {Array<DeleteCounseleeBatchReq>} deleteCounseleeBatchReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCounseleeBatch(deleteCounseleeBatchReq: Array<DeleteCounseleeBatchReq>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCounseleeBatch(deleteCounseleeBatchReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 개인정보 수집 동의 여부 삭제
     * @param {string} counseleeConsentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCounseleeConsent(counseleeConsentId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCounseleeConsent(counseleeConsentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 복약 상담 삭제
     * @param {DeleteMedicationCounselReq} deleteMedicationCounselReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMedicationCounsel(deleteMedicationCounselReq: DeleteMedicationCounselReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMedicationCounsel(deleteMedicationCounselReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 처방 의약품 삭제
     * @param {string} counselSessionId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMedicationRecordHist(counselSessionId: string, id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMedicationRecordHist(counselSessionId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 처방 의약품 일괄 삭제
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMedicationRecordHistsByCounselSessionId(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMedicationRecordHistsByCounselSessionId(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐의약품 폐기 정보 삭제
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWasteMedicationDisposal(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteWasteMedicationDisposal(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐의약품 삭제
     * @param {string} counselSessionId 
     * @param {string} wasteMedicationRecordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWasteMedicationRecord(counselSessionId: string, wasteMedicationRecordId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteWasteMedicationRecord(counselSessionId, wasteMedicationRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연계 기관 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAffiliatedWelfareInstitutions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAffiliatedWelfareInstitutions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 등록된 생년월일 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBirthDates(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBirthDates(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐의약품 폐기 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWasteMedicationDisposal(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWasteMedicationDisposal(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담일정 수정
     * @param {ModifyCounselReservationReq} modifyCounselReservationReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyCounselReservation(modifyCounselReservationReq: ModifyCounselReservationReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyCounselReservation(modifyCounselReservationReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담일정 검색 및 필터링
     * @param {number} page 
     * @param {number} size 
     * @param {string} [counseleeNameKeyword] 
     * @param {Array<string>} [counselorNames] 
     * @param {Array<string>} [scheduledDates] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchCounselSessions(page: number, size: number, counseleeNameKeyword?: string, counselorNames?: Array<string>, scheduledDates?: Array<string>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchCounselSessions(page, size, counseleeNameKeyword, counselorNames, scheduledDates, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 약 검색
     * @param {string} keyword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchMedicationByKeyword(keyword: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchMedicationByKeyword(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselCard(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselCard(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 기본 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselCardBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselCardBaseInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 기본 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselCardBaseInformation_1(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselCardBaseInformation_1(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 건강 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselCardHealthInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselCardHealthInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 건강 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselCardHealthInformation_2(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselCardHealthInformation_2(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 자립생활 역량 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselCardIndependentLifeInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselCardIndependentLifeInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 자립생활 역량 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselCardIndependentLifeInformation_3(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselCardIndependentLifeInformation_3(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 생활 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselCardLivingInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselCardLivingInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 생활 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselCardLivingInformation_4(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselCardLivingInformation_4(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselCard_5(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselCard_5(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담일정 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselSession(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselSession(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담일정 목록 조회
     * @param {string} [baseDate] 
     * @param {string} [cursor] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselSessionListByBaseDateAndCursorAndSize(baseDate?: string, cursor?: string, size?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselSessionListByBaseDateAndCursorAndSize(baseDate, cursor, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 상세 정보 조회
     * @param {string} counseleeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselee(counseleeId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselee(counseleeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 기본 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounseleeBaseInformation(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounseleeBaseInformation(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 기본 정보 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounseleeBaseInformation_6(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounseleeBaseInformation_6(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 개인정보 수집 동의 여부 조회
     * @param {string} counselSessionId 
     * @param {string} counseleeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounseleeConsentByCounseleeId(counselSessionId: string, counseleeId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounseleeConsentByCounseleeId(counselSessionId, counseleeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 목록 조회
     * @param {number} page 
     * @param {number} size 
     * @param {string} [name] 
     * @param {Array<string>} [birthDates] 
     * @param {Array<string>} [affiliatedWelfareInstitutions] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectCounselees(page: number, size: number, name?: string, birthDates?: Array<string>, affiliatedWelfareInstitutions?: Array<string>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectCounselees(page, size, name, birthDates, affiliatedWelfareInstitutions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 복약 상담 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectMedicationCounsel(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectMedicationCounsel(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐의약품 리스트 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectMedicationRecordListBySessionId(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectMedicationRecordListBySessionId(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 처방 의약품 리스트 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectMedicationRecordListBySessionId1(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectMedicationRecordListBySessionId1(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 이전 상담 내역 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectPreviousCounselSessionList(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectPreviousCounselSessionList(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 이전 상담 카드 item 목록 조회
     * @param {string} counselSessionId 
     * @param {SelectPreviousItemListByInformationNameAndItemNameTypeEnum} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectPreviousItemListByInformationNameAndItemName(counselSessionId: string, type: SelectPreviousItemListByInformationNameAndItemNameTypeEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectPreviousItemListByInformationNameAndItemName(counselSessionId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 이전 복약 상담 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectPreviousMedicationCounsel(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectPreviousMedicationCounsel(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 수정
     * @param {string} counselSessionId 
     * @param {UpdateCounselCardReq} updateCounselCardReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCounselCard(counselSessionId: string, updateCounselCardReq: UpdateCounselCardReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCounselCard(counselSessionId, updateCounselCardReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 기본 정보 수정
     * @param {string} counselSessionId 
     * @param {UpdateBaseInformationReq} updateBaseInformationReq 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCounselCardBaseInformation(counselSessionId: string, updateBaseInformationReq: UpdateBaseInformationReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCounselCardBaseInformation(counselSessionId, updateBaseInformationReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 건강 정보 수정
     * @param {string} counselSessionId 
     * @param {UpdateHealthInformationReq} updateHealthInformationReq 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCounselCardHealthInformation(counselSessionId: string, updateHealthInformationReq: UpdateHealthInformationReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCounselCardHealthInformation(counselSessionId, updateHealthInformationReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 자립생활 역량 수정
     * @param {string} counselSessionId 
     * @param {UpdateIndependentLifeInformationReq} updateIndependentLifeInformationReq 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCounselCardIndependentLifeInformation(counselSessionId: string, updateIndependentLifeInformationReq: UpdateIndependentLifeInformationReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCounselCardIndependentLifeInformation(counselSessionId, updateIndependentLifeInformationReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 생활 정보 수정
     * @param {string} counselSessionId 
     * @param {UpdateLivingInformationReq} updateLivingInformationReq 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCounselCardLivingInformation(counselSessionId: string, updateLivingInformationReq: UpdateLivingInformationReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCounselCardLivingInformation(counselSessionId, updateLivingInformationReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 카드 상태 수정
     * @param {string} counselSessionId 
     * @param {UpdateCounselCardStatusReq} updateCounselCardStatusReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCounselCardStatus(counselSessionId: string, updateCounselCardStatusReq: UpdateCounselCardStatusReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCounselCardStatus(counselSessionId, updateCounselCardStatusReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상담 일정 상태 변경
     * @param {UpdateStatusInCounselSessionReq} updateStatusInCounselSessionReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCounselSessionStatus(updateStatusInCounselSessionReq: UpdateStatusInCounselSessionReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCounselSessionStatus(updateStatusInCounselSessionReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 기본 정보 수정
     * @param {UpdateCounseleeReq} updateCounseleeReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCounselee(updateCounseleeReq: UpdateCounseleeReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCounselee(updateCounseleeReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내담자 개인정보 수집 동의 여부 수정
     * @param {UpdateCounseleeConsentReq} updateCounseleeConsentReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCounseleeConsent(updateCounseleeConsentReq: UpdateCounseleeConsentReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCounseleeConsent(updateCounseleeConsentReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * req body에 counselorId 넣지 않은 경우 로그인 계정 정보로 할당됨.
     * @summary 상담일정 담당 약사 수정
     * @param {UpdateCounselorInCounselSessionReq} updateCounselorInCounselSessionReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCounselorInCounselSession(updateCounselorInCounselSessionReq: UpdateCounselorInCounselSessionReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCounselorInCounselSession(updateCounselorInCounselSessionReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 복약 상담 수정
     * @param {UpdateMedicationCounselReq} updateMedicationCounselReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMedicationCounsel(updateMedicationCounselReq: UpdateMedicationCounselReq, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateMedicationCounsel(updateMedicationCounselReq, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SelectPreviousItemListByInformationNameAndItemNameTypeEnum = {
    Smoking: 'SMOKING',
    Drinking: 'DRINKING',
    Nutrition: 'NUTRITION',
    Exercise: 'EXERCISE',
    MedicationManagement: 'MEDICATION_MANAGEMENT',
    DiseaseInfo: 'DISEASE_INFO',
    Allergy: 'ALLERGY',
    MedicationSideEffect: 'MEDICATION_SIDE_EFFECT',
    CounselPurposeAndNote: 'COUNSEL_PURPOSE_AND_NOTE',
    Communication: 'COMMUNICATION',
    Evacuation: 'EVACUATION',
    Walking: 'WALKING'
} as const;
export type SelectPreviousItemListByInformationNameAndItemNameTypeEnum = typeof SelectPreviousItemListByInformationNameAndItemNameTypeEnum[keyof typeof SelectPreviousItemListByInformationNameAndItemNameTypeEnum];
