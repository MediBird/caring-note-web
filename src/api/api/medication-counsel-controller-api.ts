/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddMedicationCounselReq } from '../models';
// @ts-ignore
import type { CommonResAddMedicationCounselRes } from '../models';
// @ts-ignore
import type { CommonResDeleteMedicationCounselRes } from '../models';
// @ts-ignore
import type { CommonResSelectMedicationCounselRes } from '../models';
// @ts-ignore
import type { CommonResSelectPreviousMedicationCounselRes } from '../models';
// @ts-ignore
import type { CommonResUpdateMedicationCounselRes } from '../models';
// @ts-ignore
import type { DeleteMedicationCounselReq } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { UpdateMedicationCounselReq } from '../models';
/**
 * MedicationCounselControllerApi - axios parameter creator
 * @export
 */
export const MedicationCounselControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 복약 상담 추가
         * @param {AddMedicationCounselReq} addMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMedicationCounsel: async (addMedicationCounselReq: AddMedicationCounselReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addMedicationCounselReq' is not null or undefined
            assertParamExists('addMedicationCounsel', 'addMedicationCounselReq', addMedicationCounselReq)
            const localVarPath = `/v1/counsel/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addMedicationCounselReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 복약 상담 삭제
         * @param {DeleteMedicationCounselReq} deleteMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedicationCounsel: async (deleteMedicationCounselReq: DeleteMedicationCounselReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteMedicationCounselReq' is not null or undefined
            assertParamExists('deleteMedicationCounsel', 'deleteMedicationCounselReq', deleteMedicationCounselReq)
            const localVarPath = `/v1/counsel/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteMedicationCounselReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 복약 상담 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMedicationCounsel: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectMedicationCounsel', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (counselSessionId !== undefined) {
                localVarQueryParameter['counselSessionId'] = counselSessionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 이전 복약 상담 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPreviousMedicationCounsel: async (counselSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counselSessionId' is not null or undefined
            assertParamExists('selectPreviousMedicationCounsel', 'counselSessionId', counselSessionId)
            const localVarPath = `/v1/counsel/record/{counselSessionId}/previous/summary`
                .replace(`{${"counselSessionId"}}`, encodeURIComponent(String(counselSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 복약 상담 수정
         * @param {UpdateMedicationCounselReq} updateMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMedicationCounsel: async (updateMedicationCounselReq: UpdateMedicationCounselReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateMedicationCounselReq' is not null or undefined
            assertParamExists('updateMedicationCounsel', 'updateMedicationCounselReq', updateMedicationCounselReq)
            const localVarPath = `/v1/counsel/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMedicationCounselReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MedicationCounselControllerApi - functional programming interface
 * @export
 */
export const MedicationCounselControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MedicationCounselControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 복약 상담 추가
         * @param {AddMedicationCounselReq} addMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMedicationCounsel(addMedicationCounselReq: AddMedicationCounselReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResAddMedicationCounselRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMedicationCounsel(addMedicationCounselReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MedicationCounselControllerApi.addMedicationCounsel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 복약 상담 삭제
         * @param {DeleteMedicationCounselReq} deleteMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMedicationCounsel(deleteMedicationCounselReq: DeleteMedicationCounselReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResDeleteMedicationCounselRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMedicationCounsel(deleteMedicationCounselReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MedicationCounselControllerApi.deleteMedicationCounsel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 복약 상담 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectMedicationCounsel(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectMedicationCounselRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectMedicationCounsel(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MedicationCounselControllerApi.selectMedicationCounsel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 이전 복약 상담 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectPreviousMedicationCounsel(counselSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResSelectPreviousMedicationCounselRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectPreviousMedicationCounsel(counselSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MedicationCounselControllerApi.selectPreviousMedicationCounsel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 복약 상담 수정
         * @param {UpdateMedicationCounselReq} updateMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMedicationCounsel(updateMedicationCounselReq: UpdateMedicationCounselReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResUpdateMedicationCounselRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMedicationCounsel(updateMedicationCounselReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MedicationCounselControllerApi.updateMedicationCounsel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MedicationCounselControllerApi - factory interface
 * @export
 */
export const MedicationCounselControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MedicationCounselControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 복약 상담 추가
         * @param {AddMedicationCounselReq} addMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMedicationCounsel(addMedicationCounselReq: AddMedicationCounselReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResAddMedicationCounselRes> {
            return localVarFp.addMedicationCounsel(addMedicationCounselReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 복약 상담 삭제
         * @param {DeleteMedicationCounselReq} deleteMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedicationCounsel(deleteMedicationCounselReq: DeleteMedicationCounselReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResDeleteMedicationCounselRes> {
            return localVarFp.deleteMedicationCounsel(deleteMedicationCounselReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 복약 상담 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMedicationCounsel(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectMedicationCounselRes> {
            return localVarFp.selectMedicationCounsel(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 이전 복약 상담 조회
         * @param {string} counselSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPreviousMedicationCounsel(counselSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResSelectPreviousMedicationCounselRes> {
            return localVarFp.selectPreviousMedicationCounsel(counselSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 복약 상담 수정
         * @param {UpdateMedicationCounselReq} updateMedicationCounselReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMedicationCounsel(updateMedicationCounselReq: UpdateMedicationCounselReq, options?: RawAxiosRequestConfig): AxiosPromise<CommonResUpdateMedicationCounselRes> {
            return localVarFp.updateMedicationCounsel(updateMedicationCounselReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MedicationCounselControllerApi - object-oriented interface
 * @export
 * @class MedicationCounselControllerApi
 * @extends {BaseAPI}
 */
export class MedicationCounselControllerApi extends BaseAPI {
    /**
     * 
     * @summary 복약 상담 추가
     * @param {AddMedicationCounselReq} addMedicationCounselReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicationCounselControllerApi
     */
    public addMedicationCounsel(addMedicationCounselReq: AddMedicationCounselReq, options?: RawAxiosRequestConfig) {
        return MedicationCounselControllerApiFp(this.configuration).addMedicationCounsel(addMedicationCounselReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 복약 상담 삭제
     * @param {DeleteMedicationCounselReq} deleteMedicationCounselReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicationCounselControllerApi
     */
    public deleteMedicationCounsel(deleteMedicationCounselReq: DeleteMedicationCounselReq, options?: RawAxiosRequestConfig) {
        return MedicationCounselControllerApiFp(this.configuration).deleteMedicationCounsel(deleteMedicationCounselReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 복약 상담 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicationCounselControllerApi
     */
    public selectMedicationCounsel(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return MedicationCounselControllerApiFp(this.configuration).selectMedicationCounsel(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 이전 복약 상담 조회
     * @param {string} counselSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicationCounselControllerApi
     */
    public selectPreviousMedicationCounsel(counselSessionId: string, options?: RawAxiosRequestConfig) {
        return MedicationCounselControllerApiFp(this.configuration).selectPreviousMedicationCounsel(counselSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 복약 상담 수정
     * @param {UpdateMedicationCounselReq} updateMedicationCounselReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicationCounselControllerApi
     */
    public updateMedicationCounsel(updateMedicationCounselReq: UpdateMedicationCounselReq, options?: RawAxiosRequestConfig) {
        return MedicationCounselControllerApiFp(this.configuration).updateMedicationCounsel(updateMedicationCounselReq, options).then((request) => request(this.axios, this.basePath));
    }
}

